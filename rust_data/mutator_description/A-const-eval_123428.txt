Mutation Operator: Modify Tuple Access to Non-existent Fields

Target: Tuple variable access in expressions or assignments.

Mutation Rule:
1. Identify an existing tuple in the code. For example, consider a tuple declared as `let tuple_name = (value1, value2);`.
2. Locate a point in the code where the tuple is accessed using its fields, such as `tuple_name.0` or `tuple_name.1`.
3. Change the field access to a non-existent field index. If the tuple has two elements, then accessing `tuple_name.2` would be invalid. 
4. Only modify field access within the constraints of tuples, ensuring that the mutation respects tuple indices (i.e., using `.2`, `.3`, etc., beyond the valid range).

Example:
Original Code:
```rust
let data = (10, 20);
let result = data.0 + data.1;
```

Mutated Code:
```rust
let data = (10, 20);
let result = data.2 + data.1;
```
This mutation targets accessing an index that does not exist within the tuple, potentially leading to a compilation error or unexpected behavior during execution.