Mutation Operator: Modify Assignments in Match Arms

Target: Match expressions involving Option types

Mutation Rule:
1. Identify a match expression that pattern matches on an Option type. In the seed program, locate the let statement that assigns an Option value, such as `let some_variable = Some(value)` or `let some_variable = None`.
2. Within the match expression, identify both arms of the match. Typically, these arms will be `None` and `Some(variable)`.
3. Select the `Some(variable)` arm for modification. Locate the expression or statements within this arm that use the variable, such as `consume(variable)` in the example provided.
4. Introduce a reassignment to the variable being pattern matched. Specifically, within the `Some(variable)` arm, prior to any usage of the variable, add a line of code that reassigns the variable to a new Option value, such as `variable = None;` or `variable = Some(new_value);`.
5. Ensure that the reassignment causes ambiguity in usage. For example, if the original usage was `consume(variable)`, the reassignment should ensure `variable` becomes an unexpected type or value before this usage.

Example:
Original Code:
```
match some_option {
    None => {
        println!("No value");
    }
    Some(x) => {
        consume(x);
    }
}
```

Mutated Code:
```
match some_option {
    None => {
        println!("No value");
    }
    Some(mut x) => {
        x = None; // Reassigning the matched value
        consume(x);
    }
}
```

This mutation operator leverages the feature of pattern matching and value reassignment within match arms to explore scenarios that might lead to inconsistencies or unexpected behaviors in the type system, potentially uncovering compiler bugs related to improper handling of variable reassignments in match expressions.