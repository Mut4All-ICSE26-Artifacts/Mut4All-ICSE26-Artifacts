Mutation Operator: Targeting Function with Return Type Modifications

1. Target: This mutation operator applies to functions with a specified return type, particularly when using const generics or related features like `generic_const_exprs`.

2. Mutation Rule:
   - Identify a function with a specified return type, such as `const fn` or any function that utilizes const generics.
   - Change the return type of the function to a more complex type that interacts with const generics or involves lifetime parameters.
   - Example: Change a return type from a simple type like `usize` to a more complex one like a tuple or a custom struct that involves lifetimes.

3. Step-by-Step Instructions:
   - Locate a function definition with a simple return type, e.g., `const fn example() -> usize`.
   - Introduce a new struct that takes lifetime parameters or generic consts. Declare this struct before the function.
     Example:
     ```rust
     struct Complex<'a>(&'a str);
     ```
   - Change the function's return type to this new struct or a similar type involving lifetimes or const generics.
     Example:
     ```rust
     const fn example<'a>() -> Complex<'a> {
         Complex("example")
     }
     ```

4. Explanation: By altering the return type to involve lifetime parameters or additional complexities, we force the compiler to work with regions and const evaluations differently, increasing the chance of exposing internal errors or edge cases in const generic handling.