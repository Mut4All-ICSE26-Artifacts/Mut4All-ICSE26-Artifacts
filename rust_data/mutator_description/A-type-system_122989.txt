Mutation Operator: Modify Constant Generic Parameters

Target: Trait Definitions with Constant Generic Parameters

Step-by-step Mutation Rule:
1. Identify a trait definition that utilizes constant generic parameters. This is typically found in the declaration of the trait where the keyword `trait` is used, followed by the trait name and within angle brackets `<const ...>`.
2. Select a constant generic parameter from the trait definition. This parameter is typically of the form `const N: Type = Value`.
3. Change the type or value of the constant generic parameter. For instance, if the original declaration is `const N: Type = Value`, modify it to `const N: DifferentType = DifferentValue` where `DifferentType` is a type that is still valid within the context, and `DifferentValue` is a different value that is appropriate for the new type.
4. Ensure that the new type and value are compatible with the trait's existing functions or associated items.
5. Apply the changes consistently across the trait definition and any implementation blocks that utilize this trait.

Example of Mutated Content:
Original:
```rust
trait ExampleTrait<const N: usize = 2> {
    fn method(&self);
}
```

Mutated:
```rust
trait ExampleTrait<const N: i32 = -1> {
    fn method(&self);
}
```

In this example, the constant generic parameter `N` originally of type `usize` with a value `2` is changed to type `i32` with a value `-1`. This mutation tests how the compiler handles different types and values for constant generics, potentially uncovering issues in type-checking and evaluation.