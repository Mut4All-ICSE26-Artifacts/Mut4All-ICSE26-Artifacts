Mutation Operator: Union Field Manipulation

Target: This mutation operator targets union declarations within struct definitions.

Precise Mutation Rule:
1. Identify a union declaration within a struct. In the given bug report, the struct `Foo` contains an unnamed union field.
2. Modify the union by introducing at least one named field within the union. This will force the compiler to handle the union fields explicitly during the `-Zunpretty=expanded,hygiene` operation.
3. If the union is unnamed, add a named field with a simple type such as `i32`, `u8`, or `f64`.

Steps:
- Locate any union declaration within a struct. For example:

```rust
struct Example {
    _: union {
    }
}
```

- Introduce a named field into the union:

```rust
struct Example {
    _: union {
        field1: i32
    }
}
```

Explanation:
- This mutation targets the compilation and pretty-printing process of union fields by altering their structure from unnamed to named, potentially triggering latent bugs in the pretty-printing mechanism due to the new complexity in the union's type representation.
- By introducing a minimal, yet significant change to a union, we can assess if the Rust compiler handles the union correctly with additional structural information, potentially highlighting areas where the compiler may have assumptions about unnamed unions.