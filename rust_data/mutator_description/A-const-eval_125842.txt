Mutation Operator: Enum Variant Overloading

Target: Enums with variants

Mutation Rule:
1. Identify an enum with multiple variants. In this case, locate the `enum` keyword and its associated variants.
2. Check for any variant names that are reused with different types or no types. In this example, the `TestSome` variant appears twice with different signatures.
3. Select one repeated variant name.
4. Modify the variant list to consolidate the repeated variant names into one, ensuring that all variants are unique.
5. Provide additional information if needed to clarify or differentiate the variants.

Example:
Given the following enum:

enum Sample<T> {
    VariantOne(T),
    VariantOne(),
}

The mutation would involve changing it to:

enum Sample<T> {
    VariantOneA(T),
    VariantOneB(),
}

Explanation:
The mutation operator targets enums with overloaded variant names, which could potentially lead to type confusion or incorrect assumptions by the compiler. By ensuring that each variant name is unique, we reduce ambiguity and potential for misinterpretation by the compiler, which can help in identifying areas where the compiler is not robust in handling overloading scenarios.