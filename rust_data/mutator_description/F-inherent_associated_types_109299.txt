Mutation Operator: Modify Associated Type Lifetime

Target: Associated Types in `impl` blocks

Mutation Rule:
1. Identify a trait in the Rust code that declares an associated type or a function returning an associated type. For example, the `Document` trait declares a function `cursor` returning an associated type `Lexer::Cursor<'_>`.
2. Locate the corresponding `impl` block that defines this associated type. In the given Rust code, `Lexer` implements the `Cursor<'a>` associated type.
3. Replace the lifetime parameter in the associated type definition with a new one that directly conflicts with existing lifetimes without introducing new ones. For example, change `type Cursor<'a> = DocCursorImpl<'a>;` to `type Cursor<'a> = DocCursorImpl<'d>;` in the `Lexer` struct.

Example:
Original Code:
```rust
impl<'cursor> Lexer<'d> {
    type Cursor<'a> = DocCursorImpl<'a>;
}
```

Mutated Code:
```rust
impl<'cursor> Lexer<'d> {
    type Cursor<'a> = DocCursorImpl<'d>;
}
```

This mutation operator targets the associated type definitions within `impl` blocks, modifying the lifetime parameters to trigger potential lifetime-related issues. It specifically aims to create conflicts in lifetime specifications, which are common triggers for internal compiler errors (ICEs) when the compiler attempts to resolve these constraints.