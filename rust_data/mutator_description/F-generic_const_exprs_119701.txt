Mutation Operator

Target: Function Signature in Trait Implementations
This mutation operator is designed to target trait implementations where the function signatures might not match the trait definition. It applies to any existing implementation of a trait function in the seed program. The purpose of this operator is to introduce a type mismatch in trait methods, leading to potential inconsistencies that can trigger compiler errors or crashes.

Step-by-step Mutation Rule:
1. Identify a trait in the seed program that includes a method definition with a specific parameter type.
2. Locate an implementation of the identified trait within the program.
3. Modify the parameter type in the method implementation to differ from the original type specified in the trait definition.
4. Ensure that the new type is still a valid type in the Rust language and is either larger or smaller in bit size than the original type to increase the chance of triggering layout or ABI issues. For instance, change a `u8` to a `usize` or vice versa.

Example Pseudo-Code:

Assume the original trait and implementation are as follows:

```
trait ExampleTrait {
    fn example_method(param: u8) -> usize;
}

impl ExampleTrait for SomeType {
    fn example_method(param: u8) -> usize {
        // original implementation
    }
}
```

Apply the mutation:

Locate the implementation and adjust the parameter type:

```
impl ExampleTrait for SomeType {
    fn example_method(param: usize) -> usize {
        // mutated implementation
    }
}
```

By changing the parameter type from `u8` to `usize`, the implementation now has a signature that doesn't match the trait's definition, which could lead to compilation errors or ICEs. This mutation explores the compiler's handling of trait method signature mismatches and is applicable to any seed program with trait implementations.