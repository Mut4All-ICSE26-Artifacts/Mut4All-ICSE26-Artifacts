Mutation Operator: Change Trait Implementations with Incorrect Const Generic Types

Target: Applies to any trait implementation block involving const generics.

Mutation Rule:
1. Locate a trait implementation where a struct or type is implementing a trait using const generics.
2. Identify a const generic parameter used in the implementation whose type is an integer, `bool`, or `char`.
3. Change the type of this const generic parameter to a floating-point type (`f32` or `f64`), which is not allowed for const generics.
4. Ensure the trait implementation uses this parameter in a way that would cause a type mismatch, such as using the parameter in a calculation or a cast.

Example:
Original Code:
```rust
trait ExampleTrait {}

struct ExampleStruct<const N: usize>;
impl<const M: usize> ExampleTrait for ExampleStruct<M> {}
```

Mutated Code:
```rust
trait ExampleTrait {}

struct ExampleStruct<const N: usize>;
impl<const M: f64> ExampleTrait for ExampleStruct<M> {}
```

Explanation:
This mutation deliberately introduces a type error by changing the const generic parameter from a valid integer type to a floating-point type, which is not supported. This alteration is intended to trigger a compilation error or potentially expose a compiler bug when the Rust compiler tries to handle the invalid const generic type. The example demonstrates altering the implementation of a trait from using a valid `usize` to an invalid `f64` type, which helps in identifying issues related to type handling in const generics.