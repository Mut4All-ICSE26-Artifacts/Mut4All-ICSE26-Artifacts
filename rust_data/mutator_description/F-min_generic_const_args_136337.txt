Mutation Operator: Function as Const Argument

Target: Function and Const Argument in Generic Parameter

Description: This mutation operator targets the usage of functions as const arguments within the constraints of generic parameters of a function or type. The goal is to trigger potential bugs related to the evaluation of const expressions involving function calls.

Mutation Rule:
1. Identify a function declaration in the seed program, denoted as `fn example_function()`.
2. Locate a generic parameter constraint within the seed program. For instance, a struct or function definition with a generic parameter, like `struct Example<T>`.
3. Modify the constraint by introducing a const argument that attempts to use the identified function. For instance, change the constraint to `where [(); example_function()]:`.
4. Ensure to include the feature flag `#![feature(min_generic_const_args)]` at the top of the program if not already present, as this feature is needed for the mutation to compile.

Example:

Original Code:
```
#![feature(min_generic_const_args)]

fn example_function() -> usize {
    3
}

struct Example<T>;

fn use_example() {
    // some code
}
```

Mutated Code:
```
#![feature(min_generic_const_args)]

fn example_function() -> usize {
    3
}

struct Example<T>
where
    [(); example_function()]:,
{
}

fn use_example() {
    // some code
}
```

This mutation attempts to use a function as a const argument in the generic parameter constraint, which can lead to compiler crashes or bugs due to the restrictions and current limitations of the Rust compiler in handling such constructs.