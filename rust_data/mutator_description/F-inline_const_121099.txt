Mutation Operator: Inline Const Expression Mutation in Global Asm

Target Code Construct: The mutation targets `global_asm!` macros specifically when they utilize inline constant expressions.

Mutation Rule: 

1. Locate `global_asm!` macro calls in the seed program.
2. Check if any argument involves a constant expression such as `const` followed by operations (e.g., division, multiplication).
3. If a division operation is detected, replace the divisor with a constant, non-zero value to prevent division by zero errors.
4. If available, use existing constants from the seed program. If none are suitable, introduce a new constant with a non-zero value.

Example:

Original Code:
```rust
global_asm!("/* {} */", const 1 / 0);
```

Mutated Code:
```rust
global_asm!("/* {} */", const 1 / 1);
```

Explanation:
- The mutation changes the divisor from zero to one, preventing the division by zero error while testing the handling of the `const` keyword within `global_asm!`.
- This mutation is designed to broadly test the handling of inline constant expressions in `global_asm!` without causing immediate runtime errors.