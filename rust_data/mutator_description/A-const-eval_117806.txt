Mutation Operator

Target: Match Expressions

Description: Modify match arms to use patterns that are not directly comparable with the type of the matched value.

Mutation Steps:
1. Identify a match expression within the code. The expression should be of the format `match <expression> { arm1 => {}, arm2 => {} }`.
2. Select a match arm where the pattern is identical to the matched value, such as `C` in `match C`.
3. Change the selected match arm pattern to a pattern that cannot be directly compared with the type of the matched expression. For instance, if the matched value is a pointer or reference type, modify the pattern to a type or value that does not match that pointer/reference type.
4. Ensure that the newly introduced pattern is valid Rust syntax but does not align semantically with the original pattern's type.

Example Pseudo-code:
Original:
```rust
const A: *const str = "example";

fn main() {
    match A {
        A => { /* Original arm action */ },
        _ => { /* Default action */ }
    }
}
```

Mutated:
```rust
const A: *const str = "example";

fn main() {
    match A {
        42 => { /* Original arm action */ }, // Here, `42` is an integer and cannot be directly compared to a pointer.
        _ => { /* Default action */ }
    }
}
```

This mutation introduces semantic errors by using patterns that are not directly comparable to the matched value, which can lead to edge cases not properly handled by the compiler's internal logic.