Mutation Operator: Modify Array Length in Function Parameters

Target: Function parameter definitions involving arrays with constant expressions.

Steps:
1. Identify a function in the seed program that has parameters which are arrays with lengths specified by constant expressions, like `[usize; N]`.
2. Change the constant expression to a new parameter of the function itself. This introduces dependency on a parameter that may not always be evaluated correctly, potentially leading to ICEs (Internal Compiler Errors).
3. Ensure that the new parameter is given a valid type (e.g., `usize`) and that it doesn't conflict with existing parameters.

Example Transformation:
Before Mutation:
```rust
pub fn example_function(arr: &[usize; 10]) {
    // Function logic here
}
```

After Mutation:
```rust
pub fn example_function(arr: &[usize; len], len: usize) {
    // Function logic here
}
```

Explanation:
- The mutation involves changing the constant length of an array in a function parameter to be reliant on another parameter. This can lead to unexpected compiler behavior, especially under the experimental `generic_const_exprs` feature, because the compiler may struggle with type inference or evaluation of the new parameter-dependent length.
- This mutation is universal as it applies to any function definition using arrays with constant lengths, covering a wide variety of potential code structures.