Mutation Operator: Array Index Overflow in Constant Context

Target: Arrays within unsafe blocks inside constant functions or constant contexts.

Mutation Rule:
1. Identify an array within an unsafe block that is being accessed or manipulated in a constant function or const context.
2. Locate the index position where the array is accessed. This index should be a constant expression.
3. Modify the index expression to an overly large value, specifically `usize::MAX - 1`, to test for overflow conditions.
4. Ensure the access occurs within an unsafe block to suppress safety checks that the Rust compiler would otherwise enforce.

Example:
Given an original segment of code:
```
const fn sample() {
    unsafe {
        let array = [10, 20, 30];
        let value = array[1];
    }
}
```

Apply the mutation:
```
const fn sample() {
    unsafe {
        let array = [10, 20, 30];
        let value = array[usize::MAX - 1];
    }
}
```

Rationale:
This mutation targets potential overflow errors within the constant evaluation engine of the Rust compiler, specifically when handling array indexing in unsafe blocks. By using an exceedingly large index value, we intentionally stress test the Rust compiler's ability to handle edge cases in constant evaluation, potentially revealing underlying bugs similar to those showcased in the bug report.