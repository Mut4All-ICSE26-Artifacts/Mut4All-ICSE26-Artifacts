Mutation Operator: Inline Assembly with Faulty Constant Expressions

Target Code Construct:
This mutation operator targets inline assembly expressions within Rust code, specifically modifying constant expressions used in `global_asm!` or `asm!` macros.

Mutation Rule:
1. Identify an existing `global_asm!` or `asm!` macro invocation in the seed program.
2. Select a constant expression within the macro that evaluates to a valid value.
3. Modify the constant expression to introduce an undefined or erroneous behavior that is unexpected during constant evaluation. This could include operations such as division by zero or shifting by a negative count.
4. Ensure that the result of the constant expression is used within the assembly template string (e.g., `"/* {} */", const EXPRESSION`).

Example:
Original Code:
```rust
global_asm!("mov eax, {}", const 10);
```

Mutated Code:
```rust
global_asm!("mov eax, {}", const 1 / 0);
```

Explanation:
The mutation operator introduces an arithmetic error (division by zero) within the constant expression of the `global_asm!` macro. This is likely to trigger an internal compiler error (ICE), as it involves constant evaluation that the compiler may not properly handle, especially within the context of inline assembly. The mutation targets the constant expression directly, which is a common area where compiler bugs can be found when dealing with constant evaluation in inline assembly.