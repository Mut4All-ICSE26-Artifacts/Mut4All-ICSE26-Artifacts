Mutation Operator

Target: Function Definition

Mutation Rule:
1. Identify a function with a simple return type, such as `fn simple_function() -> Type { ... }`.
2. Introduce a new function parameter of a generic constant expression type. This can be achieved by adding a constant parameter that depends on a generic parameter or a complex expression.
3. Ensure that the new parameter is incorporated into the function's logic. For instance, use it in a return expression or within a computation.

Example:
Original:
```rust
fn example_function() -> i32 {
    42
}
```

Mutated:
```rust
fn example_function<const N: usize>() -> usize {
    N + 42
}
```

Explanation:
By introducing a constant parameter `N` of type `usize`, we change the function signature to include a generic constant expression. The function now depends on a compile-time constant, which increases complexity and the likelihood of triggering Rust compiler bugs related to const evaluation and type checking.