Mutation Operator: Modify Enum Variant Types

Target: Enums with multiple variants and associated data types

Mutation Rule:
1. Identify an enum with multiple variants, each associated with different data types. For example, consider an enum `Action` with variants `Start(u32)` and `Stop(bool)`.
   
2. Select one variant of the enum, and change its associated data type to another type used in the same enum. In the example, change `Start(u32)` to `Start(bool)`.

3. Ensure that all parts of the code using the affected variant are updated to conform to the new data type, while intentionally causing type mismatches where possible to expose potential compiler bugs.

Example:
Original Enum:
```rust
enum Action {
    Start(u32),
    Stop(bool),
}
```

Mutated Enum:
```rust
enum Action {
    Start(bool), // Changed from u32 to bool
    Stop(bool),
}
```

4. Update the code that constructs or matches on the modified variant to use the new type. If `Action::Start(42)` was used, it should now use a boolean, potentially leading to deliberate type mismatches.

By altering the data type of an enum variant, the goal is to identify any unexpected behavior in the compiler's handling of type resolution and variant management, particularly when using features like `async_fn_in_trait`.