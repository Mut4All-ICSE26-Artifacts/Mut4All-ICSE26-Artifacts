Mutation Operator: Modify Const Generic Parameters

Target: Struct and Function Definitions

Mutation Rule:
1. Identify a struct definition that uses const generics with a non-supported type, such as a user-defined type (e.g., `Dimension`).
   
2. Change the const generic parameter type to an integer, bool, or char, which are the currently supported types for const generics. 

Step-by-Step Instructions:
- Locate the struct definition with a const generic parameter of a non-supported type. For example:
  ```rust
  pub struct Quantity<S, const D: Dimension>(S);
  ```
- Modify the const generic parameter to use an integer type instead:
  ```rust
  pub struct Quantity<S, const D: i32>(S);
  ```
3. Similarly, identify any function definitions using const generics with non-supported types.

4. Modify the const generic parameter type in the function signature to use an integer, bool, or char. For example:
  ```rust
  pub fn add<const U: Dimension>(x: Quantity<f32, U>) -> Quantity<f32, U> {
  ```
- Change it to:
  ```rust
  pub fn add<const U: i32>(x: Quantity<f32, U>) -> Quantity<f32, U> {
  ```

Example of Mutated Content:
Before Mutation:
```rust
pub struct Quantity<S, const D: Dimension>(S);

pub fn add<const U: Dimension>(x: Quantity<f32, U>) -> Quantity<f32, U> {
    x + y
}
```

After Mutation:
```rust
pub struct Quantity<S, const D: i32>(S);

pub fn add<const U: i32>(x: Quantity<f32, U>) -> Quantity<f32, U> {
    x + y
}
```

This mutation operator exploits the current limitations and incomplete features related to const generics in Rust, thus having the potential to trigger compiler bugs or crashes when the compiler attempts to resolve the const generic parameters.