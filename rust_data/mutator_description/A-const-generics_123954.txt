Mutation Operator
Target: Struct Definition with Const Generics

Mutation Rule:
1. Identify a struct with const generic parameters. The struct should have at least one const generic parameter with a default value and another parameter (either const or type).
2. Swap the order of parameters such that the const parameter with a default value is defined after any other parameters.
3. If there are existing default values for other parameters, ensure the newly ordered default const parameter is not the last in the parameter list.
4. Verify the struct is part of the program's type definitions and used within the code to observe compiler behavior changes.

Example:
Original Code:
```
struct B<T = i32, const M: usize = 5> {
    values: [T; M]
}
```

Mutated Code:
```
struct B<const M: usize = 5, T = i32> {
    values: [T; M]
}
```

This mutation operator leverages the documented bug scenario where const parameters with default expressions influence compiler behavior, particularly when their order is manipulated in relation to other parameters. Applying such a mutation can help identify potential issues with const generics in different code contexts.