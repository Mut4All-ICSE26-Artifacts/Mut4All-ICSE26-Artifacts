Mutation Operator:
Target: Function Definition with Generic Constant Parameters
This mutation operator targets functions that use generic constant parameters within their definitions and implementations.

Mutation Rule:
Step-by-step instructions:
1. Locate a function that uses a generic constant parameter in its signature, for instance, a function defined as `fn example<T, const N: usize>(param: T) -> T`.
2. Change the type of the constant parameter to a custom type defined within the program, instead of a primitive type like `usize`.
3. Ensure that the custom type used is a type alias or a newtype defined within the same module, or currently included in the scope.
4. Modify the function's implementation to introduce a comparison or operation involving the constant parameter of the custom type, e.g., if the constant was used for array length, now use it in a context that expects a primitive type.
5. For example, transform:
   Original Function: 
   ```
   pub fn calculate<T, const SIZE: usize>(input: T) -> [T; SIZE] {
       // Implementation...
   }
   ```
   Into Mutated Function: 
   ```
   type Dimension = usize;
   pub fn calculate<T, const SIZE: Dimension>(input: T) -> [T; SIZE] {
       let size_check = SIZE > 10; // Introduce logic expecting SIZE to be a primitive
       // Implementation...
   }
   ```
6. If required, declare any new types at the module level, ensuring clarity of type and scope within the existing code base.

This mutation focuses on modifying the type and usage context of a generic constant parameter, which may push the compiler's type inference and checking mechanisms into edge cases, potentially revealing bugs related to type resolution and trait evaluation.