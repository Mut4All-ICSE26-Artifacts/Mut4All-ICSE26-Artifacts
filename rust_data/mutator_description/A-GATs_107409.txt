Mutation Operator: Struct Type Change

Target: Struct definitions with named fields.

Mutation Rule:
1. Identify a struct with named fields (i.e., using Fields::Named).
2. For each field in the struct, wrap its type as Option<T>, where T is the original type.
3. This prepares for further nesting, such as converting the field type into NestedOption<Option<T>> or other nested generics.
4. This kind of mutation can affect trait bounds, type inference, and compiler behavior under deeply nested generic contexts.

Example:
Original Code:
   ```rust
   struct MyStruct {
      data: i32,
   }
   ```

Mutated Content:
   ```rust
   struct MyStruct {
      data: NestedOption<Option<i32>>,
   }
   ```

This mutation targets struct field types by wrapping them into an Option<T> form, which can later be nested further into complex generic wrappers like NestedOption<Option<T>>. Such changes are intended to test the compilerâ€™s ability to handle nested generic types, potentially revealing internal bugs or inference inconsistencies