Mutation Operator: Altering Loop Break Values in Const Context

Target: Loops within constant evaluation blocks, specifically `while` or `loop` constructs, focusing on altering the value returned by a `break` statement.

Mutation Rule:
1. Identify a loop (`while` or `loop`) within a constant evaluation block, such as within an array size specification or a constant `const` declaration.
2. Locate a `break` statement within this loop.
3. Change the value following the `break` statement to a different data type. For example, if the current value is an integer literal (e.g., `break 2;`), modify it to a unit type `()` by using `break ();`.

Example:
Original:
```
fn example() {
    [(); {
        while some_condition() {
            break 1;
        }
        100
    }];
}
```
Mutated:
```
fn example() {
    [(); {
        while some_condition() {
            break ();
        }
        100
    }];
}
```

This mutation is designed to trigger type-related issues in const evaluation by creating a type mismatch between the expected and returned types in loops, potentially causing the compiler to crash or produce an internal compiler error (ICE).