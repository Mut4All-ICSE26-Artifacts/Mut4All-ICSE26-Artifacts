Mutation Operator 1: Modify Trait Bound for Function Parameter

Target: Function parameter with a trait bound

Mutation Rule:
- Identify a function parameter that uses a trait bound, like `foo<T: PointerLike>(x: T)`.
- Modify the trait bound to introduce a conflict or an impossible trait condition.

Step-by-Step Instructions:
1. Locate a function that takes a generic parameter with a trait constraint. For example:
   ```rust
   fn foo<T: SomeTrait>(x: T) {
       // Function body
   }
   ```

2. Change the trait bound by combining it with another trait using a logical conjunction that is unlikely to coexist. For instance, if `SomeTrait` is already a trait bound, modify it to:
   ```rust
   fn foo<T: SomeTrait + AnotherTrait>(x: T) {
       // Function body
   }
   ```

3. Ensure that `AnotherTrait` is incompatible with `SomeTrait` or introduces a logical conflict that is difficult or impossible for the compiler to resolve.

Example:
Given the following seed code snippet:
```rust
use std::marker::PointerLike;

fn foo<T: PointerLike>(x: T) {
    let _: dyn* PointerLike = x;
}
```

Apply the mutation:
```rust
fn foo<T: PointerLike + Clone>(x: T) {
    let _: dyn* PointerLike = x;
}
```

Explanation:
- This mutation introduces a condition where `T` must implement both `PointerLike` and `Clone`, which could potentially create a conflict if `PointerLike` does not naturally extend or coexist with `Clone`.
- Such a mutation is likely to uncover issues in trait resolution and type checking within the compiler, especially when using experimental feature gates like `dyn_star`.