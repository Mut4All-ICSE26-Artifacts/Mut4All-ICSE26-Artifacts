Mutation Operator

Target: Const function within a generic constant expression in a function's where clause.

Mutation Rule:
1. Locate a function with a `where` clause that utilizes a generic constant expression.
2. Identify the const function invoked within the generic constant expression (e.g., `bar()` in `for<const N: usize = { const fn bar() {} bar(); 1 }>`).
3. Modify the body of the const function such that it returns a different constant value type (e.g., `bool` instead of `usize`).
4. Adjust the surrounding context to incorporate this new type where necessary.

Example:
Consider the original code:
```
pub fn example_function()
where
    for<const M: usize = { const fn inner() {} inner(); 42 }> ():,
{}
```

Mutation:
```
pub fn example_function()
where
    for<const M: bool = { const fn inner() { true } inner(); false }> ():,
{}
```

This mutation modifies the return type of the `inner` function from a default `()` to a `bool`, and consequently alters the expected output in the expression that invokes `inner`.