Mutation Operator

Target: Struct definition with default const generic parameters.

Mutation Rule: 

1. Identify a struct definition that includes a constant generic parameter with a default value. For example:
   ```
   struct Example<const N: usize = { const {3} }>;
   ```

2. Modify the default value of the const generic parameter. Replace the existing constant expression with an invalid or unsupported expression that might trigger compiler behavior related to constant generics. Here are the steps:

   a. Remove the inner `const` block and replace it with a more complex expression that involves a calculation or a reference to another constant, such as:
      ```
      struct Example<const N: usize = { 1 + 2 * 3 }>;
      ```

   b. Alternatively, introduce a division by zero or another operation that might be invalid at compile time:
      ```
      struct Example<const N: usize = { 10 / 0 }>;
      ```

3. Recompile the program after applying the mutation to observe if the modified expression causes internal compiler errors (ICE) or other unexpected behaviors.

This operator leverages the known instability and complexity around const generic expressions, aiming to uncover issues by introducing potentially problematic expressions as default values.