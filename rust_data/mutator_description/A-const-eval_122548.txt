Mutation Operator: Transform Static to Mutable Static

Target Code Construct:
The mutation targets `static` variables, specifically those that are initialized as immutable and have potential for transformation to `static mut`.

Mutation Rule:
1. Identify a `static` variable that is initialized with an immutable value. For instance, consider `static VAR_NAME: TYPE = VALUE;`.
2. Change the `static` keyword to `static mut`, allowing for mutation within an unsafe block. The new declaration should be `static mut VAR_NAME: TYPE = VALUE;`.
3. Ensure that the changes maintain semantic correctness by adding an appropriate unsafe block where the static variable is utilized to handle potential mutable modifications.

Example:
Original Code:
```
static IMMUTABLE_VAR: i32 = 10;
```

Mutated Code:
```
static mut IMMUTABLE_VAR: i32 = 10;
fn main() {
    unsafe {
        IMMUTABLE_VAR += 5;
    }
}
```

This mutation tests the compiler's handling of mutable static variables, which can reveal issues in constant evaluation, especially when interacting with unsafe code.