Mutation Operator: Inject Generator Closure Iterating Over Function Parameter

Target: This mutation operator applies to functions with one or more parameters where a generator closure iterating over a selected parameter is inserted.

Mutation Rule:
1. Locate a function that has at least one parameter.
2. Select one parameter from the function’s signature.
3. Insert at the end of the function body a generator-style closure || { for i in param { yield(); } } that iterates over the chosen parameter and yields inside the loop.

Steps:
- Identify a function with parameters, e.g., fn function(x: i32).
- Choose a parameter, for example x.
- Append to the function body a closure that loops over x and contains a yield statement inside the loop.

Example:
Original Code:
```rust
fn function(x: i32) {
    // function body
}
```

Mutated Code:
```rust
fn function(x: i32) {
    // function body
    || {
        for i in x {
            yield();
        }
    };
}
```

By injecting a generator closure that iterates over a function parameter and yields, this mutation operator stresses the compiler’s handling of generator expressions, iterator patterns, and lifetime interactions with generic parameters. It may expose bugs in closure capture, generator lowering, or MIR transformation related to const generics and parameter iteration.