Mutation Operator:
Target: Const declarations in Rust code

Mutation Rule:
1. Identify a const declaration in the Rust code that involves a constant expression being evaluated at compile time. For example, a const declaration like `const FOO: isize = 10;`.
2. Change the value of the constant expression to a more complex operation that can still be evaluated at compile time. Specifically, introduce a calculation involving multiple operations or type castings, which increases the complexity of the constant evaluation. Use only existing constants or values that can be derived from them.
3. Ensure that the new expression is syntactically correct and respects Rust's type system. The idea is to introduce variability in constant evaluation without introducing runtime constructs.
4. For example, if the original code has `const FOO: isize = 10;`, change it to:
   ```rust
   const FOO: isize = 5 + 3 * (2 as isize);
   ```
5. Ensure that the new const expression still evaluates to a valid value within the constraints of the Rust type system but introduces a path for potential internal compiler errors during constant evaluation.

This mutation leverages the const-eval process, which is sensitive to complex expressions, and thus more likely to trigger bugs associated with constant evaluation in the compiler.