Mutation Operator:
Target Construct: Struct Definition with Const Generic Parameters

Mutation Rule:
1. Identify a struct definition that includes a const generic parameter. This parameter should have a default value based on a constant.
   Example:
   ```rust
   const DEFAULT_VALUE: usize = 1024;
   pub struct MyStruct<const SIZE: usize = DEFAULT_VALUE> {
       // struct fields
   }
   ```

2. Create a function within the same module or scope that accepts a const generic parameter and modifies it in a way that leads to a non-trivial computation or complex type resolution. The function should ideally have a signature that involves the struct.
   Example:
   ```rust
   fn compute_value<const N: usize>() -> usize {
       N + 1 // or any other non-trivial operation
   }
   ```

3. Within the function, instantiate the struct using the function's const generic parameter, overriding the default value. Ensure the computation is complex enough to trigger generic const expression resolution.
   Example:
   ```rust
   fn use_struct<const N: usize>() {
       let instance = MyStruct::<{ compute_value::<N>() }> {};
       // Perform operations on instance
   }
   ```

4. Call the function with a specific constant value from the main function or another function within the module.
   Example:
   ```rust
   fn main() {
       use_struct::<10>();
   }
   ```

Expected Outcome:
This mutation operator exploits potential issues in type-checking and const generic parameter substitution by introducing a complex usage pattern of const generics. The combination of default values, function-level const parameters, and non-trivial computations should stress-test the Rust compiler's handling of const generics, potentially leading to crashes if there are bugs in the type resolution or substitution mechanisms.