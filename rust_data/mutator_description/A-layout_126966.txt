Mutation Operator: Modify Union Field Types

Target: Union definitions that include fields of different enum types.

Mutation Rule:
1. Identify a union in the code that contains multiple fields, each represented by a different enum type.
2. Select one of the fields in the union that is currently represented by an enum type.
3. Change the type of the selected field to a primitive integer type (e.g., `u32` or `i32`).
4. Ensure that the primitive type chosen aligns with the intended value range of the enum to maintain the semantics of the code.

Example:
Original Code:
```rust
union ExampleUnion {
    field1: EnumType1,
    field2: EnumType2,
}
```

Mutated Code:
```rust
union ExampleUnion {
    field1: EnumType1,
    field2: u32, // Changed from EnumType2 to u32
}
```

This mutation modifies the union by replacing one of its enum fields with a primitive integer type, potentially triggering alignment and layout calculation issues in the compiler due to differing data layouts.