Mutation Operator:

Target: Integer literals in function bodies

Mutation Rule:
1. Identify all integer literals in the function body of the seed program.
2. Select an integer literal and check its value.
3. If the integer value is a compile-time constant, change it to its negative form by prefixing it with a negative sign.
4. Consider the edge cases for integer types (e.g., for `i64`, specifically use `-0x8000_0000_0000_0000` or equivalent values that are just beyond the limits of the type to trigger overflow).
5. Ensure that the literal is not part of an arithmetic operation that already results in a negative value.
6. Compile the program to check if this mutation causes a compiler crash or an unexpected internal compiler error (ICE).

Example of Mutated Content:
Original: `let x = 0x8000_0000_0000_0000;`
Mutated: `let x = -0x8000_0000_0000_0000;`

Note: Use the largest possible negative value for the integer type to test for overflow conditions efficiently.