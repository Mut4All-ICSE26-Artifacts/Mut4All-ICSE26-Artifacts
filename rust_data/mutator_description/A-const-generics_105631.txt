Mutation Operator: Modify Generic Parameter Defaults

Target: Struct Definitions with Const Generics

Mutation Rule:
1. Identify a struct definition that uses const generics with default values, such as `struct A<const B: str = 1, C>;`.
2. Ensure that any generic parameter with a default value is the last in the list of generic parameters.
3. If a non-trailing generic parameter has a default value, move it to the end of the list and adjust other parameters accordingly.

Pseudo-code example before mutation:
```rust
struct Example<const X: i32 = 10, Y, Z>;
```

Step-by-step mutation:
1. Identify the generic parameter `const X: i32 = 10` that has a default value and is not the last parameter.
2. Move `const X: i32 = 10` to the end of the generic parameter list.
3. Adjust the struct definition to maintain the same semantics.

Pseudo-code example after mutation:
```rust
struct Example<Y, Z, const X: i32 = 10>;
```

This mutation operator targets struct definitions with misordered generic parameters, attempting to provoke the compiler into handling potential edge cases around parameter ordering with defaults. It focuses on ensuring compliance with Rust's requirement that parameters with default values must be trailing, which can lead to crashes or errors if improperly implemented in the compiler.