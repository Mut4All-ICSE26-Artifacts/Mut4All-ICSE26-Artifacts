
Mutation Operator 1: Lambda Expression in Function

Target: Function containing lambda expressions (also known as closures).

Mutation Rule:
1. Identify a function that contains a lambda expression. For example, consider a function `fn example() { || println!("Hello"); }`.
2. Mutate the lambda body to introduce a yield expression. Change the body of the lambda to include a yield, i.e., `|| yield;`.
3. If the lambda expression already contains a yield, replace it with a different type of expression, such as a return statement or another lambda.

Example Transformation:
Original Code:
```
fn example() {
    let closure = || println!("Hello");
    closure();
}
```

Mutated Code:
```
fn example() {
    let closure = || yield;
    closure();
}
```

This transformation targets lambda expressions within functions and modifies their bodies to contain a `yield`, potentially causing the compiler to encounter issues with generator-related type-checking, hence leading to compiler bugs similar to the one described in the bug report.