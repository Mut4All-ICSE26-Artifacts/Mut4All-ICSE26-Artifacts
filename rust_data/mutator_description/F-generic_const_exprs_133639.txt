Mutation Operator: Modify Const Generic Expressions in Structs

Targeted Code Construct: Structs with const generic parameters

Mutation Rule:
1. Identify a struct in the seed program that uses const generics, such as `struct a<const b: bool>;`.
2. Alter the const generic expression in the struct definition to introduce a non-trivial boolean expression.
3. Ensure the expression involves existing constants or variables, avoiding the introduction of undeclared elements.
4. If the existing expression is simple (e.g., `d <= 2`), mutate it by adding logical operators (AND, OR) and additional conditions that reference existing constants.
5. Example mutation: Change `a<{ d <= 2 }>: c` to `a<{ d <= 2 && d > 0 }>: c`.
6. Make sure to apply this mutation to relevant locations in the program, ensuring consistency.

By modifying the const generic expressions in this way, the mutation aims to cover scenarios where the compiler's handling of complex const expressions may lead to internal errors or unexpected behavior.