Mutation Operator: Modify Constant Expression in Generic Function Call

Target: Function calls with constant generic parameters.

Mutation Rule:
1. Identify a function call that involves a constant generic parameter, such as `test::<N>()`.
2. Introduce a temporary variable within the constant expression block. For example, change `test::<{ 3 }>()` to `test::<{ let tmp = 3; tmp }>()`.
3. Use a reference to an existing lifetime parameter (if any) within this block, similar to using `let _: &'a ()`.
4. Ensure the temporary variable is evaluated correctly within the constant expression.
5. The constant expression should still resolve to a value compatible with the generic parameter type.

Example:
Original Code:
```rust
fn example<const N: usize>() {}

fn test_fn<'a>() {
    example::<{ 3 }>();
}
```

Mutated Code:
```rust
fn example<const N: usize>() {}

fn test_fn<'a>() {
    example::<{
        let _: &'a ();
        let tmp = 3;
        tmp
    }>();
}
```

This mutation operator targets the subtle aspects of constant expressions in generic contexts, potentially exposing bugs related to how Rust handles lifetimes and temporary variables within constant generic expressions.