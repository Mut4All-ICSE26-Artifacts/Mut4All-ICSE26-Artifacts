Mutation Operator: Modify Const-Generic Parameters in Function Definitions

Target Construct: Function Definitions using const-generics

Mutation Rule:
1. Identify a function definition that uses const-generic parameters. These are typically defined with the `const` keyword inside the angle brackets, alongside type parameters.

2. Select one of the const-generic parameters in the function signature. This parameter should be used as part of the type constraints in the function's where clause.

3. Change the value or type of this const-generic parameter in the function signature to an incompatible type or an unexpected literal value that it does not expect.

4. Ensure the new value or type is compatible with the Rust type system but different enough to potentially trigger a bug or ICE in the compiler due to unexpected behavior with constant expressions.

Example:
Consider a function defined as follows:

```rust
pub fn calculate_area<const WIDTH: usize, const HEIGHT: usize>() -> usize {
    WIDTH * HEIGHT
}
```

Mutation Steps:
- Select one of the const-generic parameters, e.g., `WIDTH`.
- Modify `WIDTH` to be a different type of const-generic parameter, such as a boolean or an unexpected literal, in the function's context.
- For instance, change the const parameter in the function signature:

```rust
pub fn calculate_area<const WIDTH: bool, const HEIGHT: usize>() -> usize {
    // This will change the context in which WIDTH is used and potentially trigger a bug due to type mismatch
    (WIDTH as usize) * HEIGHT
}
```

Explanation: By changing `WIDTH` from `usize` to `bool`, the function may encounter issues when attempting to use `WIDTH` in expressions expecting a numeric type, potentially causing compiler errors or ICEs, especially in complex const-generic expressions. This mutation targets the compiler's ability to handle type checking and const-generics in conjunction.