Mutation Operator: Alter Static Variable Declaration

Target: Static variable declarations involving external types or unsafe operations.

Mutation Rule:
1. Identify any static variable declaration that uses an external type or involves an unsafe operation. In this example, focus on the static variable `MAGIC_FFI_REF`.
2. Change the mutability of the static variable. If it is immutable, make it mutable by adding `mut` keyword after `static`. If it is mutable, remove the `mut` keyword.
3. Ensure that the assignment to the static variable is valid with respect to Rust's safety guarantees, paying attention to borrowing rules.

Example:
Original Code:
```rust
pub static MAGIC_FFI_REF: &'static Wrapper = unsafe {
    std::mem::transmute(&{
        let y = 42;
        y
    })
};
```

Mutated Code:
```rust
pub static mut MAGIC_FFI_REF: &'static Wrapper = unsafe {
    std::mem::transmute(&{
        let y = 42;
        y
    })
};
```

Explanation:
This mutation targets the mutability aspect of static variables, especially when they involve unsafe code or external types. By altering the mutability, we can explore how the compiler handles changes to safety guarantees and synchronization requirements, potentially uncovering issues related to const evaluation and internal consistency checks.