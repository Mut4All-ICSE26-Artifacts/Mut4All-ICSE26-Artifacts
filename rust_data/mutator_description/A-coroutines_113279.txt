Mutation Operator 1: Modify Generator Yield Points

This mutation operator targets generator functions, specifically the yield points within the generator construct. It aims to modify the yield expression to involve a more complex or varying set of operations, which can potentially trigger compiler crashes related to the handling of generator state.

Step-by-Step Mutation Instructions:

1. Identify the generator function: Locate a function in the seed program that uses the generator syntax (e.g., `static || { ... }` or `|...| { ... }` containing a `yield` statement).

2. Modify the yield expression: Within the body of the generator, locate the `yield` statement. Modify the expression associated with `yield` to include additional operations or involve types that are not trivially sized. For example, replace `yield;` with `yield operation_on_non_sized_type();`.

   Example before mutation:
   ```rust
   static || {
       let x = &mut 0;
       yield;
       x
   }
   ```

   Example after mutation:
   ```rust
   static || {
       let x = &mut 0;
       let non_sized = *""; // Using a non-sized type reference
       yield non_sized.len(); // Yielding the result of an operation
       x
   }
   ```

3. Ensure the use of existing elements: Preferably use variables, functions, or types that are already declared in the surrounding code. If introducing new elements, explicitly declare them and ensure they contribute to a non-trivial operation.

4. Validate for syntax and logic: After mutation, ensure the code remains syntactically correct and logically coherent within the context of the seed program.

This mutation operator is designed to exploit potential weaknesses in the handling of non-sized types within generator constructs, increasing the likelihood of triggering compiler bugs related to layout or type size calculations.