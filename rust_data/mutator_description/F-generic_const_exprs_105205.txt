Mutation Operator: Modify Const Parameter Expressions in Function Returns

Target: Function Signature and Body

Mutation Rule:
1. Identify a function with generic const parameters returning a struct that uses const expressions.
2. Locate the struct type in the function return type that uses a const expression involving the const parameters, such as `Substs1<{ N + 1 }>` or `Substs1<{ (L - 1) * 2 }>` in the given example.
3. Modify the const expression in the return type to include a new operation or change an existing one. Aim to create a more complex expression that combines the existing const parameters in a non-trivial way.

Step-by-Step Instructions:
- Identify the function signature, for instance, `fn substs3<const L: usize>() -> Substs1<{ (L - 1) * 2 }>` in the example code.
- Modify the return type's const expression. For example, change `Substs1<{ (L - 1) * 2 }>` to `Substs1<{ (L - 1) * 2 + L / 2 }>` or introduce a new operation like `*` or `/`.
- Ensure the new expression still compiles regarding syntax, but aim for more complexity to stress-test the const generics system.

Example:
Original function:
```rust
fn example_function<const X: usize>() -> MyStruct<{ X + 1 }>
where
    [(); X + 1]: ,
{
    // function body
}
```

Mutated function:
```rust
fn example_function<const X: usize>() -> MyStruct<{ X + 1 * X - 2 }>
where
    [(); X + 1 * X - 2]: ,
{
    // function body
}
```

The goal of this mutation is to explore potential weaknesses in the handling of more complex const expressions within function signatures in the Rust compiler.