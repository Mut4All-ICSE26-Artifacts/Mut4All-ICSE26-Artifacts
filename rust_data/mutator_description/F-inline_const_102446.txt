Mutation Operator: Modify Array Size Expression in Union

Target Construct: Union definition with a const expression for an array size.

Mutation Rule:
Step 1: Identify a union in the Rust code that contains an array field with a size defined by a const block.
Step 2: Modify the const block expression used for the size of the array. In particular, replace the expression with a simple constant value or another basic arithmetic operation to observe the compiler's behavior.
Step 3: Ensure the replacement expression is valid and does not depend on generic parameters.

Example Transformation:
Original:
```rust
union Example<T> {
    field: [u8; const { mem::size_of::<T>() }],
}
```

Mutated:
```rust
union Example<T> {
    field: [u8; 42],  // Replaced with a constant value
}
```

Explanation:
This mutation operator specifically targets the use of const blocks within union definitions that rely on generics. By simplifying or altering the size declaration, it can expose issues related to constant evaluation and generic handling in the compiler. This approach offers the potential to cover a wide range of scenarios where unions interact with const generics, inducing unexpected compiler behavior or crashes.