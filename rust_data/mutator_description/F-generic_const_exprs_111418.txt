Mutation Operator: Modify Lifetime Annotations in Function Definitions

Target Code Construct: Function definitions with lifetime annotations

Mutation Rule:
1. Identify a function definition with lifetime annotations. Example:

   ```rust
   fn example<'a, 'b>(x: &'a i32, y: &'b i32) {}
   ```

2. Modify the lifetime annotations to create a scenario that involves complex interactions between lifetimes, potentially leading to bound variable issues. Specifically, introduce a lifetime that appears to escape its intended scope.
   
   - Step 1: Add an extra lifetime annotation that is not used in the parameter list, e.g., `<'c>`.
   - Step 2: Modify the function's parameter list to introduce a reference that uses the new lifetime in a way that conflicts with existing lifetimes. For instance, use `'c` in combination with existing lifetimes:

   Modified Example:

   ```rust
   fn example<'a, 'b, 'c>(x: &'a &'c i32, y: &'b i32) {}
   ```

3. Ensure that the mutation introduces a possible escaping bound variable situation, where the new lifetime `'c` may interfere with the existing lifetimes `'a` or `'b`, potentially leading to issues similar to those described in the bug report.

4. Compile the program using the nightly Rust compiler with the `#![feature(generic_const_exprs)]` feature enabled to observe if the mutation causes a compiler crash or unexpected behavior, similar to the bug described.