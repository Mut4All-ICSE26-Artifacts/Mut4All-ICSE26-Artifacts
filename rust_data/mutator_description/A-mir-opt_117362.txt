Mutation Operator: Array Index Mutation

Target Code Construct: Array Indexing in Constant Definitions

Mutation Rule:
1. Identify constant definitions where an array indexing operation is used. These can be found in `impl` blocks for traits or directly within a struct or static definition.
2. Inspect the index value being used for the array indexing operation. The goal is to create an out-of-bounds access similar to the one in the provided bug report.
3. Modify the index to exceed the array's bounds, creating an intentional out-of-bounds error. For instance, if the array has `N` elements, change the index to `N + 1` or higher.
4. Ensure the array and its index form part of a constant evaluation, triggering the ICE when the compiler attempts to evaluate the constant at compile time.

Example Pseudo-Code:
```rust
// Original code
const ARR: [usize; 3] = [1, 2, 3];
const IDX: usize = 2; // index within bounds
const ELEMENT: usize = ARR[IDX];

// Mutated code
const ARR: [usize; 3] = [1, 2, 3];
const IDX: usize = 4; // index out of bounds
const ELEMENT: usize = ARR[IDX]; // This will trigger an ICE
``` 

This mutation operator effectively manipulates array indexing within compile-time constant evaluations, provoking errors similar to those encountered in the MIR optimization process. The operator is broadly applicable to most Rust programs utilizing constant array indexing, enhancing the likelihood of exposing bugs in the MIR optimization phase.