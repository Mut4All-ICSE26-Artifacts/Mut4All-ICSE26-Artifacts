Mutation Operator: Modify Const Generics in Structs

Target: This mutation operator targets the usage of const generics within structs, specifically when implementing functions that rely on these const generics.

Mutation Rule:
1. Identify a struct definition that uses const generics. For example,
   ```rust
   struct Example<const N: usize>;
   ```

2. Locate the implementation of a function within an impl block for this struct that uses the const generic in its return type or parameter. For example,
   ```rust
   impl<const N: usize> Example<N> {
       fn modify(self) -> Example<{ N + 1 }> {
           Example
       }
   }
   ```

3. Mutate the function's logic by introducing a dependency on an external variable for the const expression calculation. For example,
   - Declare an external constant:
     ```rust
     const OFFSET: usize = 5;
     ```

   - Modify the function to use this constant in the return type calculation:
     ```rust
     impl<const N: usize> Example<N> {
         fn modify(self) -> Example<{ N + OFFSET }> {
             Example
         }
     }
     ```

4. Adapt the existing code to trigger the modified behavior:
   ```rust
   pub fn trigger_issue() {
       Example::<0>.modify();
   }
   ```

By introducing an external constant into the const expression, the mutation aims to explore how the Rust compiler handles dependencies and calculations in generic const expressions, potentially exposing issues related to const evaluation and error reporting. This mutation leverages already declared components, enhancing its applicability and coverage across different codebases.