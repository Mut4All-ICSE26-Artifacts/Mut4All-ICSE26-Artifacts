Mutation Operator: Modify Pattern Matching with `if let` and Never Patterns

Target: This mutation operator targets pattern matching constructs within loops or standalone match expressions. It specifically applies to match arms that use `if let` guards in conjunction with patterns that are expected to never match, such as empty patterns or logically impossible patterns.

Mutation Rule:
1. Identify a match expression within a function, focusing on match arms containing `if let` guards.
2. In the selected match arm, replace the pattern in the `if let` guard with a pattern that is logically impossible to match, such as using a negative pattern or a pattern that is not possible given the type being matched.
3. Ensure the match arm containing the modified `if let` guard is retained to maintain logical consistency in the match structure.

Example:
Original Seed Code:
```rust
fn check_value(x: Option<i32>) {
    match x {
        Some(val) if let Some(_) = Some(val) => println!("Value is {}", val),
        _ => println!("No value"),
    }
}
```

Mutated Code:
```rust
fn check_value(x: Option<i32>) {
    match x {
        Some(val) if let None = Some(val) => println!("Value is {}", val),
        _ => println!("No value"),
    }
}
```

Explanation:
- The original match arm used `if let Some(_) = Some(val)`, which is a valid and matchable pattern.
- The mutation replaces `Some(_)` with `None`, creating a logically impossible pattern for this arm given the `Some(val)` on the outer pattern.
- This mutation can potentially trigger the compiler to explore edge cases in pattern matching and `if let` guard evaluation, potentially uncovering bugs related to pattern checking or guard execution.

This mutation operator is versatile and applicable to any Rust code utilizing match expressions with `if let` guards, providing widespread coverage across different codebases.