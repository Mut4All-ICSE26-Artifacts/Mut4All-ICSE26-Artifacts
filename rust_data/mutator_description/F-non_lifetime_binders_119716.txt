Mutation Operator: Modify Trait Bound with Inconsistent Lifetime

Target: Function signature with trait bounds, particularly those involving lifetimes and impl Traits.

Mutation Rule:
1. Identify a function that uses trait bounds with lifetimes and impl Traits. For example, a signature like `fn example_fn<T>(param: impl Trait<T> + '_)`.

2. Modify the trait bound by introducing an inconsistent lifetime. This involves adding or altering a lifetime in the trait bound that doesn't align with the other parts of the function signature or is not properly defined.

3. Ensure the rest of the function remains unchanged to isolate the mutation effect. 

Step-by-Step Instructions:
- Locate a function definition with a signature that includes a trait with a lifetime, such as `fn my_function(param: impl MyTrait<'a> + '_) {}`.
- Change the lifetime in the impl Trait to a new, undefined lifetime, or swap it with a lifetime that causes inconsistency. For example, alter the signature to `fn my_function(param: impl MyTrait<'b> + '_) {}`, where `'b` is not defined or conflicts with another lifetime.

Expected Outcome: This mutation should trigger issues related to lifetime resolution and interactions with impl Traits, leveraging the non-lifetime binders feature to expose potential compiler bugs.