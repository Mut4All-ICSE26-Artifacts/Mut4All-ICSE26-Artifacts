Mutation Operator: Const Expression Mutation

Target Construct: Function with const generic expressions

Mutation Rule: Focus on altering the const expressions inside function definitions and their respective where clauses, which involve const generics. This mutation targets functions using const generics and modifies the const expressions, especially arithmetic operations or references to uninstantiated const generics. 

Step-by-Step Instructions:

1. Identify any function that includes a const generic parameter and utilizes it within its body or where clause with an arithmetic operation.

2. Modify the arithmetic operation involving the const generic parameter by either:
   - Changing the arithmetic operator (e.g., from addition to subtraction, multiplication to division, or vice versa).
   - Altering the const expression by adding or removing a term.

3. Ensure that the modified expression still uses the existing const generic parameter or its arithmetic form.

Example of Mutation:

Original Code:
```rust
fn calculate_size<const SIZE: usize>() -> [u8; SIZE + 1]
where
    [u8; SIZE + 1]: ,
{
    [0; SIZE + 1]
}
```

Mutated Code:
```rust
fn calculate_size<const SIZE: usize>() -> [u8; SIZE - 1]
where
    [u8; SIZE - 1]: ,
{
    [0; SIZE - 1]
}
```

By performing these mutations, the goal is to explore whether the compiler robustly handles const expression variations, especially when the context changes or involves potentially unsupported const expressions.