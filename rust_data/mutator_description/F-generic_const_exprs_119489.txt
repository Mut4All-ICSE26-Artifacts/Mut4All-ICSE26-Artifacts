Mutation Operator: Modify Generic Const Expressions in Functions

Target Code Construct: Function Definitions with Generic Const Expressions

Mutation Rule:
1. Identify a function definition with a `where` clause that includes a generic constant expression. Ensure the function uses `#![feature(generic_const_exprs)]`.
2. Within the `where` clause, locate the section defining the const parameter, e.g., `const N: usize, const NP: usize = { N + 1 }`.
3. Modify the expression within the const parameter's default value to reference another const parameter with a non-linear mathematical operation (such as multiplication, division, or modulo) that involves the same parameter being defined.
4. Ensure that the new expression potentially results in an additional dependency or cycle that could lead to an unstable evaluation.
5. Example Pseudo-code Before Mutation:
   ```
   fn example_function()
   where
       for<T, const X: usize, const Y: usize = { X + 1 }> T: Copy,
   {
   }
   ```
6. Example Pseudo-code After Mutation:
   ```
   fn example_function()
   where
       for<T, const X: usize, const Y: usize = { X * 2 }> T: Copy,
   {
   }
   ```

This mutation aims to exploit potential instabilities in the evaluation of complex or cyclic expressions within const generics, which might trigger bugs related to the `generic_const_exprs` feature.