Mutation Operator: Modify Function Call Generics

Target: Function calls with generic parameters.

Mutation Rule:
1. Identify function calls in the seed program that utilize generic parameters.
2. Check if the function call provides fewer generic type arguments than the function definition requires.
3. Add the missing generic type argument(s) to the function call to match the function definition's requirements.

Example:
Consider a function definition with generics:
```
pub fn example<const N: usize, T>(value: T) { ... }
```
And a function call:
```
let result = example::<10>(&some_value);
```
Mutation Steps:
1. Identify the function call `example::<10>(&some_value);` and note that it has one generic argument while the function requires two.
2. Modify the function call to provide the missing generic type argument:
```
let result = example::<10, SomeType>(&some_value);
```
Here, `SomeType` must be replaced with an appropriate type that satisfies any constraints in the function's `where` clause, if applicable. If no constraints exist, choose an existing type from the seed program.