Mutation Operator
Target: Template Function with Non-Type Template Parameter Packs

Mutation Rule:
1. Identify a template function that uses a parameter pack for non-type template parameters.
2. Insert a constraint on the non-type template parameter using a concept, and ensure the constraint involves an unexpanded parameter pack.
3. Apply a transformation where a new concept is defined to constrain the non-type template parameter, using the parameter pack without expansion directly in the concept definition.

Example:
Original Code:
```cpp
template<typename ...Ts>
struct Container {
    template<auto ...values>
    void doSomething() {
        // Some operations
    }
};
```

Apply Mutation:
1. Define a new concept that will be used to constrain the non-type template parameter without expanding the pack.
2. Constrain the parameter pack in the template function using the defined concept.

Mutated Code:
```cpp
template<typename ...Ts>
struct Container {
    template<auto ...values>
    requires (ConceptConstraint<decltype(values)> && ...)
    void doSomething() {
        // Some operations
    }
};

template<typename T>
concept ConceptConstraint = true;
```

This mutation operator introduces a new constraint using concepts applied directly to non-type template parameter packs. It targets the interaction between concepts and template parameter packs, which can often lead to complex interactions that may trigger compiler bugs, especially if the pack is not expanded in a typical way.