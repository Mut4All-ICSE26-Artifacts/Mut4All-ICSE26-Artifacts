Mutation Operator: Template Argument Type Mismatch

Target Code Construct: Template function or class instantiation; specifically applies to template parameters and their usage in instantiations.

Mutation Rule:
1. Identify a template function or class in the seed program. Ensure it has at least one template parameter.
2. Locate an instantiation of this template function or class.
3. For the instantiation, intentionally mismatch one or more template arguments with the expected type of their corresponding template parameters.
4. If the template parameter is expected to be a type (e.g., `template<typename T>`), use a fundamental type or a user-defined type that differs from the expected type used within the template's logic.
5. If the template parameter is expected to be a constant expression (e.g., `template<int N>`), supply a value that will lead to a type incompatibility when used within the template.
6. Ensure that the rest of the program remains unchanged to ensure that the crash is due to the mutation and not due to other compilation errors.

Example:
Original Code:
```cpp
template<typename T>
class Container {
public:
    void add(T element);
};

Container<int> intContainer;
intContainer.add(5);
```

Mutated Code:
```cpp
template<typename T>
class Container {
public:
    void add(T element);
};

Container<double> doubleContainer; // Intentionally mismatched type
doubleContainer.add(5.0);
```

In this mutation, the template `Container` was originally instantiated with an `int` type, and the mutation changes it to a `double`, which might cause type deduction issues if the template logic assumes operations specific to `int`.