Mutation Operator

Target: Template Parameter Pack and Function Overloading within Concepts

Rule: This mutation operator involves modifying a function template with parameter packs to trigger potential issues with templated variadic arguments and overload resolution within the context of concepts.

Step-by-Step Instructions:
1. Locate a function template within the seed program. This function should be a member of a templated class or namespace.
2. Modify the function definition to include a parameter pack. If no parameters exist, introduce a simple parameter pack using an existing type or concept.
3. Define an additional function template overload in the same scope using the same function name but with varying parameter types or constraints.
4. Ensure the function template with the parameter pack and its overloaded counterpart are invoked in a context that requires resolution between the two.
5. Maintain the consistency of the code by using types or constraints that are already present within the seed program. If necessary, introduce new types explicitly and with clear declarations.

Example (Pseudo-code):

Before Mutation:
```
template<typename T>
concept C = true;

template<C T>
void function(T value) {
    // Some implementation
}
```

After Mutation:
```
template<typename T>
concept C = true;

template<C T, typename... Args>
void function(T value, Args... args) {
    // Some implementation for parameter pack
}

template<C T>
void function(T value) {
    // Some alternative implementation
}

// Usage example triggering overload resolution
int main() {
    function(10);        // Calls the non-pack version
    function(10, 20);    // Calls the pack version
}
```

Rationale: This mutation operator exploits the complexity of variadic templates and overload resolution in conjunction with concepts, which are known areas that can lead to compiler crashes due to the intricate nature of template instantiation and resolution logic.