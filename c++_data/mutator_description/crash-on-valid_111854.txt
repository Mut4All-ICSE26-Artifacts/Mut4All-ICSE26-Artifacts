Mutation Operator  
Target: Ternary Conditional Operator (`?:`)  
Application: Within any function body where a ternary conditional operator is used.

Mutation Rule:  
1. Identify expressions that use the ternary conditional operator in the form `(condition ? expr1 : expr2)`.  
2. Replace the first operand `expr1` with a `throw` expression. This transformation focuses on triggering bugs related to the type checks in conditional expressions.  

Example:  
Consider a function with a ternary conditional operator like this:

Original:  
```
int bar(int a) {
    return (a > 0 ? 1 : 2);
}
```

Mutation:  
Replace `1` with `throw 0`:

Modified:  
```
int bar(int a) {
    return (a > 0 ? throw 0 : 2);
}
```

This mutation specifically targets the handling of throw expressions within ternary operations and aims to test the compiler's ability to manage such constructs without crashing, focusing on type validation aspects in the ternary conditional operation.