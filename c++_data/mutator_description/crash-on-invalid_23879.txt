Mutation Operator: Modify Bitfield Size Expression

Target: Struct Bitfields

Mutation Rule:
1. Identify a struct within the seed program that contains a bitfield declaration.
2. Locate the expression that determines the size of the bitfield. This expression typically follows a colon in the bitfield declaration.
3. Modify the expression to use a combination of arithmetic operations and type casts that result in an overly large value, intentionally exceeding the storage limits of the bitfield type.
4. Ensure that the modified expression involves legal C++ constructs. For example, use large constant values and promote them using type casts to larger integer types, such as `unsigned long long` or `unsigned __int128`, combined with arithmetic operations.

Example:
Original Code:
```cpp
struct Example {
    int bitField : 4;
};
```

Mutated Code:
```cpp
struct Example {
    int bitField : 1 + (unsigned long long)0xffffffff;
};
```

This mutation operator exploits the storage limits of bitfields by artificially inflating the bitfield size expression, which is likely to trigger a compiler error or crash when the mutated code is compiled. The mutation applies to any bitfields in a struct, making it broadly applicable across various seed programs.