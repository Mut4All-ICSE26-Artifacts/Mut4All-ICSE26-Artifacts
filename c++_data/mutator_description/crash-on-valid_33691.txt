Mutation Operator: Template Specialization and Default Arguments

Target: C++ Template Structures

Mutation Rule:
1. Identify a class template declaration within the code seed. For example, locate a template declaration like "template <typename T> class Example;".

2. Specialize this template by providing a specific type argument. For example, if you have "template <typename T> class Example", modify it to:
   ```cpp
   template class Example<int>;
   ```

3. Add a default template argument to the original template declaration. Change the original declaration from:
   ```cpp
   template <typename T> class Example;
   ```
   to:
   ```cpp
   template <typename T = int> class Example;
   ```

4. Ensure that the template has at least one member function or a constructor to instantiate. If not, add a simple member function like:
   ```cpp
   void memberFunction() {}
   ```

5. If the template specialization already exists, consider adding an overload for a member function with different template constraints or default arguments.

6. Ensure that any dependent types or operations within the template are valid for the default type argument. Adjust the member function implementations, if necessary, to accommodate the default type.

Example Application:
Original Code Seed:
```cpp
template <typename T> class Example {
public:
  void memberFunction();
};
```

Mutated Code:
```cpp
template <typename T = int> class Example {
public:
  void memberFunction() {}
};

template class Example<int>;
```

By following these steps, the mutation operator aims to stress-test the compiler's ability to handle template specialization in combination with default template arguments, which can expose corner cases leading to crashes or incorrect behavior.