
Mutation Operator: Enum Usage in Struct with Using Declaration

Target Construct: Struct containing an enum, with the use of a `using enum` statement in a compound expression within the main function or any function scope.

Mutation Rule:
1. Identify a struct containing an enum within a C++ program.
2. Within a function, use a `using enum` declaration to bring the enum constants into the scope.
3. Construct a compound expression involving the enum constants using bitwise operations such as OR `|`, AND `&`, or XOR `^`.
4. Ensure compound expressions are wrapped in parentheses.
5. Initialize a variable with the result of the compound expression including at least two enum constants.

Example:
Original Seed Code:
```
struct Example {
    enum Values {
        X = 1,
        Y = 2,
        Z = 4
    };
};

using Alias = Example;

int main() {
    using enum Alias::Values;
    int result = (X | Y); // original compound expression
}
```

Mutation Example:
```
struct Example {
    enum Values {
        X = 1,
        Y = 2,
        Z = 4
    };
};

using Alias = Example;

int main() {
    using enum Alias::Values;
    int result = (Y & Z); // mutated compound expression
}
```

By following this mutation rule, you can test the compiler's handling of enum constants within compound expressions when brought into scope using `using enum`. This specifically targets potential issues that arise with certain combinations of bitwise operations and the scoping of enum constants.