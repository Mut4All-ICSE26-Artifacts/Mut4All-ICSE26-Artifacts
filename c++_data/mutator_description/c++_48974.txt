Mutation Operator: Function Parameter Reuse with Cleanup

Target: Function Definitions with Unused Parameters

Mutation Rule:
1. Identify a function with an unused parameter. For instance, a parameter that is declared but not used within the function body.
2. Within the function, introduce a new local variable assignment that uses this parameter. This can be an assignment to a variable or inclusion in a calculation or expression.
3. Ensure that the new use of the parameter is capable of triggering resource cleanup or memory management actions, such as dynamic memory allocation or object creation with destructors.

Example:
Original Code:
```
template<typename T>
void a(T &&s) {
    // parameter 's' is unused
}

void b() {
    int sum = a(0);
}
```

Mutated Code:
```
template<typename T>
void a(T &&s) {
    // Introduce a new variable that uses 's' and invokes a cleanup-related action
    T tmp = std::move(s);  // Use of std::move can invoke move semantics, possibly triggering cleanup
}

void b() {
    int sum = a(0);
}
```

This mutation encourages the exploration of scenarios where the C++ compiler's handling of cleanup actions might be flawed, especially when parameters are involved in complex resource management tasks.