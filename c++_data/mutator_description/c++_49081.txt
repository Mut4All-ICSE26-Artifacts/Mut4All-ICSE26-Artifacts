Mutation Operator: Modify Auto Return Type in Lambda

Target: Generic lambdas with auto return types.

Mutation Rule:
1. Identify a lambda function within the code that has an auto return type.
2. Modify the lambda function's return type from auto to a specific concrete type.
3. Ensure that the specific type is incompatible with the intended return type to create a type mismatch.
4. If the lambda function uses any parameters, make sure to apply this change to the parameters that are invoked within the lambda.

Example of Mutation:
Original Code:
```cpp
auto lambda = [](auto x) { return x + 1; };
```

Mutated Code:
```cpp
int lambda = [](auto x) -> double { return x + 1.0; };
```

Explanation:
- The original lambda has an auto return type, which allows the compiler to deduce the type based on the return expression.
- In the mutated code, we specify the return type of the lambda as double, which should cause a type mismatch if x is expected to be deduced as an integer or another incompatible type.
- This mutation targets the lambda's return type directly, forcing the compiler to handle the type assertion, which may lead to bugs or crashes if not handled properly.