Mutation Operator: Modify Built-in Function Argument List

Target Code Construct: Built-in function calls, specifically those utilizing the `__builtin_fpclassify` function.

Mutation Rule:
1. Identify a call to the `__builtin_fpclassify` function within the seed program.
2. Modify the argument list by changing one or more of the classification arguments to a non-standard value, such as a string or a complex expression that is not of type `int` or `float`.
3. Ensure that the last argument remains valid but replace it with a variable of a different type, such as an `int` instead of a `float`.

Example:
Original code snippet:
```cpp
int main() {
    __builtin_fpclassify(0, 1, 4, 3, 2, (x));  // Assuming x is of a valid floating-point type
}
```

Mutated code snippet:
```cpp
int main() {
    int invalidValue = 42; // Introduce a new integer variable
    __builtin_fpclassify("0", 1, 4, 3, invalidValue, (x));  // Mutate first argument to a string and last to an int
}
```

This mutation is targeted at built-in function calls and specifically manipulates the argument types and values to introduce invalid input that could potentially trigger compiler bugs.