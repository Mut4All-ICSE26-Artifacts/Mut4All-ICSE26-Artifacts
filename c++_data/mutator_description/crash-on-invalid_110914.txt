
Mutation Operator: Integer to Pointer Type Misuse

Target Code Construct: Function Call

Mutation Rule:
1. Identify a function call within the code that accepts a pointer as an argument.
2. Replace an argument that is expected to be a pointer with an integer literal or a variable of integer type.
3. Ensure the integer is not implicitly convertible to a pointer, such as a raw number (e.g., 42) or an unrelated integer variable.

Example:
Original Code:
```
void process_data(char *data) {
    // Function logic
}

int main() {
    char array[10];
    process_data(array);
    return 0;
}
```

Mutated Code:
```
void process_data(char *data) {
    // Function logic
}

int main() {
    int wrong_type = 42;
    process_data(wrong_type); // Misuse: passing integer instead of char*
    return 0;
}
```

Explanation:
This mutation operator targets function calls and introduces a type mismatch by replacing a pointer argument with an integer. This approach exploits the vulnerability in handling type conversions, especially when dealing with built-in functions or compiler-specific intrinsics, which can lead to compiler crashes if not properly handled. The mutation is designed to have broad applicability across different seed programs, given the commonality of function calls and pointer usage in C++ code.