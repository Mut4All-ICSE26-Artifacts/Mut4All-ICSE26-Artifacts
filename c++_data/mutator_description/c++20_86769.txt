Mutation Operator: Modify Template Instantiation with Invalid Argument

Target Code Construct:
- Applies to template class instantiations, particularly those using concepts.

Mutation Rule:
1. Identify a template class instantiation that uses a template parameter constrained by a concept.
2. Change the instantiation to use an argument that does not satisfy the concept requirements.

Step-by-Step Instructions:
- Locate the section of code where a template class is instantiated with a concept-constrained type.
- Replace the type argument with a type that does not meet the concept's requirements, such as using a non-integral type where an integral is expected.
- Ensure the chosen type is validly declared within the program or standard library to avoid compilation errors unrelated to concept satisfaction.

Example:
Original:
```cpp
template<typename T>
concept Integral = std::is_integral_v<T>;

template <Integral T>
class Numeric {
public:
    Numeric(T value) {}
};

Numeric<int> instance(42);  // Original instantiation
```

Mutated:
```cpp
// Attempt instantiation with a floating-point type, which may not satisfy the 'Integral' concept.
Numeric<double> instance(42.0);
```

In this mutation, `double` is used as the type argument for the `Numeric` class, which does not satisfy the `Integral` concept constraint, potentially causing the compiler to exhibit unexpected behavior or crashes during concept checking.