Mutation Operator: Union Initializer Mutation

Target Code Construct: Union initializer list in C++.

Applicable Context: This operator applies to union definitions that contain multiple data members and to code where a union is being initialized using a designated initializer or an initializer list.

Mutation Rule:
1. Identify a union type within the code having more than one data member.
2. Locate instances in the code where an object of this union type is initialized.
3. If the initialization uses a designated initializer (e.g., `.member = value`) or an initializer list, ensure that it adheres to the rule that only one member can be initialized.
4. Introduce a mutation by injecting a second initializer in the same initializer list, thus violating the one-member initialization restriction.

Step-by-Step Instructions:
- Start with a union definition such as:
  ```
  union U {
      int x;
      float y;
  };
  ```

- Locate a function or a scope where an object of this union is initialized:
  ```
  void exampleFunction() {
      U u = {.x = 1};  // Existing correct initialization
  }
  ```

- Apply the mutation by adding an additional initializer within the same initializer list:
  ```
  void exampleFunction() {
      U u = {.x = 1, .y = 1.0f};  // Mutation introduces a second initializer
  }
  ```

- Compile and verify that the change leads to a crash or an error related to union initialization.

Example in Pseudo-code:
- Before Mutation:
  ```
  union Color {
      int red;
      int green;
      int blue;
  };

  void initializeColor() {
      Color c = {.red = 255};  // Only one member initialized
  }
  ```

- After Mutation:
  ```
  union Color {
      int red;
      int green;
      int blue;
  };

  void initializeColor() {
      Color c = {.red = 255, .green = 100};  // Mutated with another initializer
  }
  ```

This mutation operator targets the initialization of unions and exploits the fact that only one member can be initialized. It is a common error source in C++ compilers, especially when handling initializer lists or designated initializers, making it a strong candidate for exposing bugs or crashes in compiler handling of union initializations.