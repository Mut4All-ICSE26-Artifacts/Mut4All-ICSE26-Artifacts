Mutation Operator: Modify Trailing Return Type with Unrelated Type

Target Code Construct: Trailing return type in function declarations, specifically within templates or lambda expressions.

Mutation Rule:
1. Identify a function within a template or lambda expression that utilizes a trailing return type. This can be inside a struct, class, or standalone function.
2. Change the trailing return type to an unrelated type that does not match any expected or previously used types in the context of the function's operations. For instance, if it is expected to return `void`, change it to an integral type like `int` or `double`.
3. Ensure the function body remains unchanged to create a discrepancy between the return type and the actual operations inside the function.

Example:
Given the original function signature with a trailing return type:
```
template<typename... Args>
auto operator()(Args... args)
-> decltype(Func::operator()(args...), void()) {
    Func::operator()(args...);
}
```

Mutation:
Change the trailing return type from `void` to an unrelated type, e.g., `int`:
```
template<typename... Args>
auto operator()(Args... args)
-> decltype(Func::operator()(args...), int()) {
    Func::operator()(args...);
}
```

Rationale: By altering the return type to an unrelated type, we create a situation where the function's implementation does not conform with the return specification, potentially leading to compiler crashes or misbehavior, especially in complex template or lambda contexts. This mutation operator is widely applicable to any use of trailing return types in template functions or lambdas.