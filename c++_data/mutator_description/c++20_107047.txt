Mutation Operator: Template Function Argument Overload

Target Code Construct: Function template within a class or struct.

Mutation Rule: This mutation operator targets function templates and involves introducing an overload resolution scenario that involves explicit template arguments mixed with function arguments. This is designed to stress template argument deduction and overload resolution mechanisms, which are common sources of compiler crashes.

Step-by-step Instructions:
1. Identify a function template within a class or struct. Ensure it takes at least one template argument.
2. Duplicate this function template to create an overloaded version.
3. Modify the parameter list of the new overloaded function to include different types or an additional parameter.
4. In the class or struct, invoke the function template with explicit template arguments and arguments that could lead to ambiguity between the two overloaded templates.

Example Pseudo-code:

Original:
```cpp
struct Example {
    template <typename T>
    static constexpr T exampleFunction(T param) {
        // Original function logic
        return param;
    }
};
```

Mutated:
```cpp
struct Example {
    template <typename T>
    static constexpr T exampleFunction(T param) {
        // Original function logic
        return param;
    }

    // Overloaded version of the same template
    template <typename T>
    static constexpr T exampleFunction(T param, int extra) {
        // Modified logic
        return param + extra;
    }

    // Call site with explicit template arguments
    static constexpr int testValue = exampleFunction<int>(42); // Ambiguous call
};
```

Rationale: This mutation operator forces the compiler to engage in complex overload resolution processes, especially when explicit template arguments are involved. These scenarios are prone to bugs and can expose issues within the compiler's template handling and overload resolution logic.