Mutation Operator: Template Declaration Mutation

Target: Template Class Declaration

Mutation Rule:
1. Identify a template class declaration in the form of `template <typename T> class ClassName;`.
2. Modify the template class declaration by introducing a partial specialization condition without providing a definition, similar to `template <typename T> class ClassName<T, true>;`.
3. Ensure that the template class is referenced in the program to trigger the compiler's handling of the incomplete specialization.

Example:
Original:
```cpp
template <typename T>
class Sample;

int main() {
    Sample<int> obj;
    return 0;
}
```

Mutated:
```cpp
template <typename T>
class Sample<T, true>; // Introduce partial specialization without definition

int main() {
    Sample<int> obj; // Reference the incomplete specialized template
    return 0;
}
```

By applying this mutation, you can potentially expose bugs in the compiler's management of template specializations, especially when dealing with incomplete or incorrectly defined template structures.