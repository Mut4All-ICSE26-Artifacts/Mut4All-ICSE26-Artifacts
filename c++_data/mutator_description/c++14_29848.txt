Mutation Operator: Modify Floating-Point Literal Parsing

Target Code Construct: Floating-point literals

Mutation Rule:
1. Identify floating-point literals in the source code, specifically those with a potential incorrect format or unsupported representation in certain compiler versions or standards.
2. Modify the floating-point literal format by adding or altering suffixes or changing the number representation:
   - If the floating-point literal is written as `number.0`, change it to `number.f` or `number.0f`, to explicitly specify a single-precision float.
   - If the literal is `number.0`, change it to `number.0L`, to explicitly denote long double.
   - Ensure the rest of the code, such as assignment or usage context, can handle the changes in floating-point types.

Example:
Original Code:
```cpp
double value = 3.0;
```

Mutated Code:
```cpp
float value = 3.0f;
```
Or:
```cpp
long double value = 3.0L;
```

This mutation targets potential issues in the parsing and handling of floating-point literals when different C++ standards are used, potentially exposing weaknesses in the compiler's frontend processing logic.