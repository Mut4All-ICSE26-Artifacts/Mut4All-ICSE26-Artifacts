Mutation Operator: Modify Template Parameter Pack Expansion

Target Code Construct: Template parameter packs within class inheritance

Mutation Rule: 
1. Identify a template structure that inherits from multiple parameter packs. For example, in the given code, `struct bar : foo<T>...` uses parameter pack expansion for inheritance.
2. Modify the parameter packs to utilize a non-type template parameter in conjunction with the type parameters. This introduces complexity in the expansion that may stress the compilerâ€™s template handling.
3. Change the class constructor or member function to receive and process these non-type parameters, ensuring the non-type values influence the class's behavior.

Example:

Original Code:
```cpp
template <class... T>
struct bar : foo<T>... {
   template <always_true<T>... U>
   auto func(U&&... values) {
   }
};
```

Mutated Code:
```cpp
template <class... T, size_t... N>
struct bar : foo<T>... {
   template <always_true<T>... U>
   auto func(U&&... values, int (&...arr)[N]) {
   }
};
```

Explanation:
- Introduce a non-type template parameter pack `size_t... N` alongside the type parameter pack `class... T`.
- Modify the `func` function to include a parameter pack of integer arrays `int (&...arr)[N]`, requiring the size of each array to match each corresponding type in `T`.
- This mutation forces the compiler to manage more complex template pack expansions, potentially revealing issues in handling mixed type and non-type template parameters.