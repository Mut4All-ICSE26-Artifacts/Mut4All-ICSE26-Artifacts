Mutation Operator: Alter Function Return Type to Void

Target Code Construct: Function Definitions

Mutation Rule:
1. Identify a function in the seed program that is not returning a void type.
2. Change the return type of the function to void.
3. Remove any return statements within the function, and ensure control flow reaches the end of the function naturally.
4. Adjust any function calls to this function in the program to ignore the return value, if applicable.

Example:
Original Code:
```
int computeSum(int a, int b) {
    return a + b;
}

void exampleUsage() {
    int result = computeSum(5, 10);
    process(result);
}
```

Mutated Code:
```
void computeSum(int a, int b) {
    // Previously: return a + b;
    int sum = a + b;
    // Any necessary side effects can be handled within the function
}

void exampleUsage() {
    // Return value is no longer used
    computeSum(5, 10);
    // process(result); is removed or adapted if needed
}
```

Explanation:
This mutation operator changes the function's return type to void, removing return statements and adjusting the usage of the function throughout the program. This kind of mutation can stress the compiler's type checking and return value handling logic, potentially revealing bugs in scenarios where the expected return type does not match the actual usage within the code.