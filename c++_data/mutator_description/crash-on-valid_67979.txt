Mutation Operator: Template Function Instantiation

Target: Template function definitions in C++ code.

Mutation Rule:
1. Identify a template function within the code. Template functions are defined with the keyword `template` followed by template parameters, e.g., `template<typename T>`.
2. Locate a point in the code where this template function is being instantiated (i.e., called with specific types).
3. Introduce a new instantiation of the template function using a type parameter that is likely to cause conflicts or excessive resource demands during compilation. Suggested types include:
   - A very large user-defined struct or class.
   - A highly nested or complex type, such as a template instantiation of a template, e.g., `std::vector<std::vector<int>>`.
4. Ensure that any new types introduced are well-defined and declared before the instantiation in the code.
5. The new template instantiation should be placed in a context where it is likely to be executed, such as within a function that is always called or in the main function.

Example:
Original Template Function:
```cpp
template<typename T>
void processData(T data) {
    // Function implementation
}
```

Mutation Example:
Assuming `LargeStruct` is a very large, complex struct defined elsewhere in the program, and `NestedVector` is defined as `using NestedVector = std::vector<std::vector<int>>;`.

Mutation:
```cpp
// Existing function instantiations
processData<int>(42);
processData<double>(3.14);

// New instantiations to introduce potential compiler stress
processData<LargeStruct>(LargeStructInstance);
processData<NestedVector>(NestedVectorInstance);
```

In this mutation, adding large or nested types as template parameters during instantiation could uncover potential issues in the compiler's template handling and instantiation logic, leading to crashes or errors.