Mutation Operator: Template Function Instantiation with Incorrect Type

Target: This mutation operator targets function templates within a C++ program.

Mutation Rule: To apply this mutation operator, follow these steps:

1. **Identify a Function Template**: Locate a function template in the seed program. Ensure the function is defined with at least one template type parameter.

2. **Create a Specialized Function Call**:
   - Choose a valid function call to the template function. For example, if the template function is `template<typename T> void foo(T a)`, there should be an existing call like `foo<int>(10);`.

3. **Modify the Template Argument**:
   - Replace the correct type used in the function call with a type that is incompatible with the operations performed in the function. For instance, if the function requires arithmetical operations, use a type such as `std::string` or a user-defined type without arithmetic operators.
   - Example: Change `foo<int>(10);` to `foo<std::string>("Hello");`, assuming the template function performs arithmetic operations on `T`.

4. **Ensure Mismatched Operations**:
   - Make sure the operations inside the function are not supported by the new template argument type. This can be achieved by verifying that the operations within the function are incompatible with the new type.

5. **Compile and Test**:
   - Compile the program and observe whether the mutation leads to a crash during template instantiation. This will often trigger compiler bugs related to template instantiation and type deduction.

This mutation operator leverages type mismatches to potentially expose issues in template type deduction or function instantiation, making it a potent technique for revealing compiler instabilities.