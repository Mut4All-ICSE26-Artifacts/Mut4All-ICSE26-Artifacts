
Mutation Operator: Modify Default Argument in Function Template

Target Code Construct: Function template with a default argument inside a class or struct.

Mutation Rule:
1. Identify a function template that has a default argument. The default argument should be a function call that uses a parameter of the function.
2. Modify the default argument in such a way that it becomes a more complex expression causing potential evaluation issues. For example, chain function calls or add nested expressions.
3. The modified default argument should still reference existing parameters of the function.

Example:
Original Code:
```
template<typename T> struct MyStruct {
    void myFunction(int n = calculate(n)); // Original default argument using parameter
};
```
Modified Code:
```
template<typename T> struct MyStruct {
    void myFunction(int n = (calculate(n)) + evaluate(n)); // Modified to include another function call in the default argument
};
```

In this mutation, the default argument expression becomes more complex by adding another function call, which can trigger potential evaluation order issues in the compiler, especially if the functions have side effects or dependencies. The functions `calculate` and `evaluate` are assumed to be existing and callable within the context, ensuring the mutation stays within the bounds of the original program's constructs.