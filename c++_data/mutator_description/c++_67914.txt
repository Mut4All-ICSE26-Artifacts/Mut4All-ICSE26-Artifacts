Mutation Operator

Target: Function Definitions

Mutation Rule:
1. Identify a constructor within a class or struct that is defined with one or more parameters.
2. Modify the constructor by removing one parameter and its associated logic, creating an overload with fewer parameters.
3. Ensure the class or struct has a sensible default behavior for the omitted constructor parameter.

Instructions:
- Locate a class or struct with a constructor, such as `struct Example` with `Example(int a, float b)`.
- Remove one parameter from the constructor. For instance, change `Example(int a, float b)` to `Example(int a)`.
- Ensure any default member initialization or logic linked to the removed parameter is either removed or given a default behavior using available class members.

Example:
Original:
```
struct Example {
    int x;
    float y;
    Example(int a, float b) : x(a), y(b) {}
};
```
Mutated:
```
struct Example {
    int x;
    float y;
    Example(int a) : x(a), y(0.0f) {}
};
```

By focusing on constructors and parameter handling, this mutation operator exploits initialization logic, a typical source of complexity and potential errors in C++ programs.