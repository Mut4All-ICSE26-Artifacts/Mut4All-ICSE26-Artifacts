Mutation Operator: Annotated Dependent Lambda

Target Code Construct: Template functions containing dependent lambdas with annotations.

Mutation Rule:
1. Identify a template function that takes a type parameter and contains a dependent lambda expression.
2. Ensure the lambda expression is annotated with an attribute, such as `[[clang::annotate_type("example")]]`.
3. Modify the lambda to instantiate it with at least one existing type from the program.
4. Introduce an additional template parameter to the lambda to increase complexity, e.g., capturing or passing an existing variable or adding another parameter.

Example Transformation:
Consider a program with the following template function and lambda:

Original:
```cpp
template <typename T>
void exampleFunction() {
  (void) [] (T) [[clang::annotate_type("example")]] { };
}

void exampleUsage() {
  exampleFunction<int>();
}
```

Mutation:
1. Identify and modify the lambda to use an additional existing variable or introduce an additional parameter.
2. Ensure to instantiate the lambda with an existing type.

Transformed:
```cpp
template <typename T, typename U>
void exampleFunction(U u) {
  (void) [u] (T, U) [[clang::annotate_type("example")]] { };
}

void exampleUsage() {
  int someVariable = 42;
  exampleFunction<int, int>(someVariable);
}
```

Explanation: The mutation involves introducing an additional parameter `U` to the template function and modifying the lambda to capture an existing variable `u` to increase dependency and complexity. This transformation is likely to explore areas of compiler handling of complex, annotated constructs, potentially leading to a crash if the handling isn't robust.