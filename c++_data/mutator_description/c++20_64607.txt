Mutation Operator: Replace Requires Clause with Lambda Expressions

Target Code Construct: Requires clause in function templates

Mutation Rule:
1. Identify a function template that uses a requires clause with a single constraint.
2. Replace the requires clause with a lambda expression that encapsulates the same constraint logic.
3. Ensure the lambda captures any necessary variables and is immediately invoked.

Example:
Before Mutation:
```cpp
template <typename T>
requires std::is_integral_v<T>
void exampleFunction(T value) {
    // Function body
}
```

After Mutation:
```cpp
template <typename T>
void exampleFunction(T value) {
    [] {
        static_assert(std::is_integral_v<T>, "Constraint failed: T must be integral");
    }();
    // Function body
}
```

Explanation:
- This mutation replaces a traditional requires clause with a lambda-based static assertion, which may highlight issues in how the compiler handles concept checking and lambda evaluation. The lambda captures the logic and performs an immediate check, simulating the requires clause behavior. This approach is likely to expose inconsistencies or edge cases in compiler handling of concepts and lambda expressions.