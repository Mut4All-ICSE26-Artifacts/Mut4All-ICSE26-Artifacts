Mutation Operator: Modify Concept Requirements in Function Signatures

Target Code Construct: Concepts in function templates

Step-by-Step Mutation Rule:

1. Identify a function template that uses C++20 concepts to constrain its template parameters. For example, a requires clause in the function signature.

2. Locate the requires clause within the function template. The clause usually contains a list of expressions that the template parameters must satisfy.

3. Modify the expressions within the requires clause to introduce a type mismatch. For instance, change a binary operation or comparison to use incompatible types.

4. Ensure that the modified expression uses types already declared in the scope of the template. If necessary, adjust the types of template parameters to maintain scope validity.

Example in Natural Language Description:

- Suppose you have a template function `foo` that is constrained by a concept `Addable`, which checks if two types can be added together.

- Original requires clause: `requires requires(T a, U b) { { a + b } -> Addable<int>; }`

- Mutate the clause by changing the result type of `a + b` to a type that `Addable` does not accept, such as `float`.

- Mutated requires clause: `requires requires(T a, U b) { { a + b } -> Addable<float>; }`

By altering the requirement to an incompatible type, you increase the likelihood of exposing compiler bugs related to concept constraints and type checking.