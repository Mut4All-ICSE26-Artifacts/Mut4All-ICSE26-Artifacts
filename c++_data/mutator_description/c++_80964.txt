Mutation Operator: Enum with Constant Expressions

Target: Enum declaration

Mutation Rule:
1. Identify an existing enum in the code. This enum should contain at least two enumerators.
2. Modify one of the enumerator expressions to be a constant expression involving operations that could be evaluated at compile-time. Use arithmetic operations such as addition, subtraction, multiplication, or division to create a complex constant expression.
3. Ensure that the expression does not lead to an overflow or undefined behavior, but is sufficiently complicated to potentially trigger a compiler issue during constant expression evaluation.

Example:
Seed Program:
```
enum Color {
    RED,
    GREEN,
    BLUE
};
```

Mutation:
```
enum Color {
    RED = 1 + 2 * 3,  // Constant expression with arithmetic operations
    GREEN,
    BLUE
};
```

Rationale:
Enums with constant expressions can stress-test the compiler's ability to evaluate complex constant expressions at compile time. By using arithmetic operations, we increase the chance of encountering edge cases in the compiler's constant expression evaluation path.