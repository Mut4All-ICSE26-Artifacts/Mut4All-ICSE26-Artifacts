Mutation Operator: Atomic and Non-Atomic Type Comparison

Target Code Construct: Function and Comparison Operations

Mutation Rule:
1. Identify functions in the seed program that contain comparison operations.
2. Within these functions, locate comparison operations between variables that have different types.
3. Specifically, target comparisons where one variable is of atomic type (e.g., `std::atomic<int>`) and the other is a regular integer type (e.g., `int`).
4. Mutate the code by introducing a comparison between a new atomic type and an existing non-atomic type.

Step-by-Step Instructions:
- In the function body, identify or declare a new atomic variable:
  - If there is an existing integer variable `T1`, declare an atomic variable of the same type:
    `std::atomic<decltype(T1)> atomic_var;`
- Introduce a comparison operation between this new atomic variable and an existing non-atomic integer variable `T2`:
  `bool result = (atomic_var == T2);`
- Ensure that the atomic variable is initialized before being used in the comparison.

Example:
Suppose the seed program has a function:
```
int compute(int a, int b) {
    return a == b;
}
```

After applying the mutation:
```
#include <atomic>

int compute(int a, int b) {
    std::atomic<int> atomic_a = a;
    return atomic_a == b;
}
```