Mutation Operator: Template Alias with Constant Expression

This mutation targets template alias definitions, specifically when the alias inadvertently resolves to a constant expression instead of a type. It is applied when a template alias within a struct or class is defined using a typename from another template instantiation.

Step-by-step Mutation Rule:
1. Identify a template alias declaration within a struct or class that uses `typename` to refer to a member of another template.
2. Change the alias to refer directly to a constant expression within the target template, causing a mismatch between the expected type and the constant.
3. Ensure that the context where the alias is used expects a type, leading to the misuse of the constant expression as a type.

Example:
Given a seed program with a template and a template alias:
```cpp
template <typename T> struct Example {
  using Type = typename T::value_type; // A type member of T is expected
};

struct Container {
  template <typename T> using Alias = typename Example<T>::Type;
};
```

Mutation:
Transform the template alias `Alias` to resolve directly to a constant:
```cpp
struct Container {
  template <typename T> using Alias = typename Example<T>::value; // Incorrectly resolve to a constant
};
```

In this mutation, `value` is assumed to be a constant defined within `Example`. This mutation changes the alias from referring to a type to incorrectly referring to a constant, thereby triggering a potential compiler crash when instantiated in a context expecting a type.