Mutation Operator: Template Parameter Mismatch in Partial Specialization

Target Code Construct: Template class partial specialization

Mutation Rule:
1. Identify a template class with a partial specialization.
2. For the partial specialization, modify it so that none of its template parameters are used in the specialization.
3. Adjust the inheritance or base class of the specialization to include a template that is not properly deduced.

Step-by-step Instructions:
- Locate a template class definition that includes a partial specialization. For example, suppose you have:

  ```cpp
  template <typename T>
  struct Base {};

  template <typename U>
  struct Derived;
  ```

- Modify the partial specialization of `Derived` such that it does not utilize its template parameter `U`, and create a mismatch in the base class deduction. The code will look like:

  ```cpp
  template <typename U>
  struct Derived<int> : Base<Derived<U>> {};  // Partial specialization does not use 'U'
  ```

- Ensure that the base class or the inheritance chain results in a scenario where the compiler tries to deduce a template argument that is not explicitly defined, leading to potential deduction failures.

Example:
Given a seed program with the following structure:

```cpp
template <typename T>
struct Container {};

template <typename V>
struct Holder;

```

Apply the mutation operator:

```cpp
template <typename V>
struct Holder<int> : Container<Holder<V>> {};  // Partial specialization does not use 'V'
```

This mutation aims to exploit template deduction logic in the compiler that may cause a crash when the template arguments do not align with what is expected, or when parameters are not utilized properly in a specialization.