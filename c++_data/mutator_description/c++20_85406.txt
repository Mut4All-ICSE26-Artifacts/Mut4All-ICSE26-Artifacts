Mutation Operator: Erroneous Template Parameter List in Alias Template

Target Construct: Alias Template Declaration

Mutation Rule:
1. Identify an alias template declaration in the seed program. This is typically declared using "using" keyword followed by an alias name.
2. Modify the alias template declaration by adding an extraneous template parameter list that is not required for the alias. For example, if the alias template does not need any additional type parameter, add a spurious template parameter list.
3. Ensure that the extraneous template parameter list does not match any expected parameters for the alias, which leads to an invalid declaration.

Example:
Original code:
```cpp
template <typename T>
using Alias = SomeClass<T>;
```

Mutated code:
```cpp
template <typename T>
template <typename U>
using Alias = SomeClass<T>;
```

This mutation operator exploits the potential for compiler bugs when handling erroneous alias template declarations with unnecessary template parameter lists, which can cause crashes in the compiler's frontend. The mutation should be applied to alias template declarations only, maintaining all other code constructs intact.