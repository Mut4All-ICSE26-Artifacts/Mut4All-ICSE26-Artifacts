Mutation Operator: Uninitialized Variable in Compound Data Type

- Target: Unions within C++ code.
- Application: Applies to unions that are being declared, especially when an in-class initializer is used.

Mutation Rule:
1. Identify a union declaration within the code.
2. Ensure the union has at least one member with an in-class initializer.
3. Introduce an incomplete initialization by removing the initializer value for one of the union's members.

Step-by-step Instructions:
- Locate the union declaration and its members.
- If a member has an initializer like `int a = 5;`, change it to `int a = ;`, removing the value.
- Ensure the member's type is known and already declared within the program context to maintain syntactic validity.

Example:
Original Code:
```
union Data {
  int value1 = 10;
  float value2 = 20.5;
};

void func() {
  Data d{};
}
```

Mutated Code:
```
union Data {
  int value1 = ;
  float value2 = 20.5;
};

void func() {
  Data d{};
}
```

This mutation exploits incomplete initializations which can trigger underlying bugs in the compiler's handling of union initializations.