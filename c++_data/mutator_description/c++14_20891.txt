Mutation Operator: Modify Function Template Return Type

Target: Function Template

Step-by-Step Mutation Rule:
1. Identify a function template in the seed program with an `auto` return type. For example:
   ```
   template <typename T>
   auto myFunction(int param);
   ```

2. Change the return type from `auto` to a specific type that might cause issues, particularly when interfacing with other language features like `decltype(auto)`. For example, change the return type to a reference type:
   ```
   template <typename T>
   T& myFunction(int param);
   ```

3. Ensure that wherever the function template is invoked or used, it remains consistent with the newly specified return type. If required, modify the usage context to match the type change, such as using a reference when calling or assigning the function.

4. If necessary, implement a minimal body for the function template in case the function needs to be defined for the mutation to compile:
   ```
   template <typename T>
   T& myFunction(int param) {
       static T value{};
       return value;
   }
   ```

The mutation aims to explore how the C++ compiler handles function templates with potentially tricky return types, especially when used with `decltype(auto)` or similar constructs, which have been known to be a source of bugs.