
Mutation Operator: Invalid Structured Binding with Reference Capture in Lambda

Target Code Construct:
This mutation operator targets lambda expressions involving structured bindings, particularly when the structured binding is done with a reference and the variables are captured in a lambda.

Mutation Rule:
1. Identify a structured binding declaration that uses auto& to bind to the result of a function call returning a struct.
2. Introduce an invalid structured binding by using auto& to bind to a temporary object, which is inherently invalid since it attempts to bind a reference to a temporary.
3. Capture the elements of the structured binding in a lambda expression.

Application Steps:
- Locate a structured binding, e.g., `auto& [a, b] = someFunctionReturningStruct();`
- Ensure the function used in structured binding returns a temporary object.
- Capture `a` and `b` in a lambda function, e.g., `bool result = [a, b] { return true; }();`

Example:
Consider a seed program with a function returning a struct:
```
struct Data {
    int p;
    int q;
};

Data fetch_data() { return { 10, 20 }; }

int main() {
    auto& [p, q] = fetch_data(); // Invalid binding to a temporary

    bool result = [p, q] { // Capture in lambda
        return true;
    }();

    return result;
}
```
This mutation introduces a scenario where the compiler should handle an invalid reference binding gracefully, but it might trigger a bug if not properly managed.