Mutation Operator: Modify Lambda Capture in Immediate Functions

Target Construct: This mutation operator targets lambda expressions used within immediate functions.

Mutation Rule:
1. Identify a lambda expression that is being passed to an immediate function.
2. Modify the lambda's capture list by adding a new capture of an existing local variable from the surrounding scope that is not already captured.
3. If all local variables are captured, replace one of the existing captures with another local variable.
4. Ensure no new variables are introduced; use only existing variables from the surrounding scope.
5. Ensure that the lambda's functionality and return type remain consistent with the original implementation even after modification.

Example:
Original Code:
```cpp
int x = 5;
auto func = []() -> int { return x; };
someImmediateFunction(func);
```

Mutated Code:
```cpp
int x = 5;
int y = 10;
auto func = [y]() -> int { return x + y; };
someImmediateFunction(func);
```

In this example, a previously uncaptured variable `y` is added to the lambda's capture list, potentially triggering issues related to lambda capture in the compiler.