Mutation Operator: Nested Name Specifier with Pointer-to-Member Interaction

Target Code Construct: Member function within a class, specifically focusing on the use of pointers-to-members with nested-name-specifiers.

Mutation Rule: Modify the use of nested-name-specifiers when accessing a member function through a pointer-to-member. This mutation aims at triggering issues related to the context of nested-name-specifiers.

Step-by-Step Instructions:
1. Identify a class with at least one member function.
2. Declare a pointer-to-member for the identified member function.
3. Create a nested-name-specifier context, such as a namespace or an enclosing class scope.
4. Attempt to use the pointer-to-member within this context using the nested-name-specifier.
5. Create an invocation of the member function via the pointer-to-member, ensuring that the nested-name-specifier is incorrectly or ambiguously qualified.

Example:
- Original Code:
  ```
  class MyClass {
  public:
      void myFunction() {}
  };

  void example() {
      using MemberFuncPtr = void (MyClass::*)();
      MemberFuncPtr ptr = &MyClass::myFunction;
      MyClass obj;
      (obj.*ptr)(); // Standard usage of pointer-to-member
  }
  ```

- Mutated Code:
  ```
  namespace Outer {
      class MyClass {
      public:
          void myFunction() {}
      };

      void example() {
          using MemberFuncPtr = void (MyClass::*)();
          MemberFuncPtr ptr = &MyClass::myFunction;
          MyClass obj;
          (obj.*Outer::MyClass::myFunction)(); // Introduce incorrect nested-name-specifier usage
      }
  }
  ```

This mutated code introduces errors by using the nested-name-specifier `Outer::MyClass` incorrectly when invoking `myFunction` through the pointer-to-member. This setup tests the compiler's ability to handle nested-name-specifier contexts correctly when mixed with pointers-to-members, potentially triggering the bug described.