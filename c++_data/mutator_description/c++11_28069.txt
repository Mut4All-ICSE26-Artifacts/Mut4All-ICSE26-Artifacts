Mutation Operator: Template Union Instantiation

1. Target Construct:
   - This mutation operator targets class templates involving union types.

2. Mutation Rule:
   - Identify a class template that contains a union with non-trivial class members.

3. Step-by-Step Instructions:
   a. Locate the class template definition in the code.
   b. Inside the class template, identify any union declarations.
   c. Modify the union to include a non-trivial class (such as one with a constructor, destructor, or copy/move operations).
   d. Instantiate the class template in a function or main scope and ensure that the instantiation triggers the union definition.

4. Example:
   Original Code:
   ```
   template<typename T>
   class Container {
       union Data {
           int x;
           double y;
       };
   };
   
   void useContainer() {
       Container<int> c;
   }
   ```

   Mutated Code:
   ```
   class NonTrivial {
   public:
       NonTrivial() {}
       ~NonTrivial() {}
   };

   template<typename T>
   class Container {
       union Data {
           int x;
           NonTrivial nt; // Added a non-trivial class
       };
   };
   
   void useContainer() {
       Container<int> c; // Instantiation of the template
   }
   ```

5. Explanation:
   - This mutation introduces a non-trivial class into the union within a template, which can potentially expose compiler edge cases or bugs during instantiation.