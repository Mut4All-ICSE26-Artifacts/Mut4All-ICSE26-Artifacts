Mutation Operator
Target Construct: Lambda expressions used with STL containers

Mutation Rule:
1. Identify a lambda expression that takes iterators as parameters.
2. Change the range of the iterators by introducing a condition that swaps the begin and end iterators. This can cause undefined behavior and potential compiler bugs.
3. Modify the lambda expression to include a conditional swap of iterators using an `if` statement inside the lambda if the iterators are in reverse order.
4. Ensure that the original logic inside the lambda can work with both forward and reverse iterators.

Example:
Original Code:
```cpp
void process(std::vector<int>& vec) {
  auto lambda = [&](auto begin, auto end) {
    for (auto it = begin; it != end; ++it) {
      // Process elements
    }
  };
  lambda(vec.begin(), vec.end());
}
```

Mutated Code:
```cpp
void process(std::vector<int>& vec) {
  auto lambda = [&](auto begin, auto end) {
    if (begin > end) {
      std::swap(begin, end);
    }
    for (auto it = begin; it != end; ++it) {
      // Process elements
    }
  };
  lambda(vec.rend(), vec.rbegin());
}
```

This mutation intentionally introduces potentially undefined behavior when iterators are swapped incorrectly, which may lead to a compiler crash or unexpected behavior, especially when combined with reverse iterators.