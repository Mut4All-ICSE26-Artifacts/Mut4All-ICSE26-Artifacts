Mutation Operator: Default Template Argument with Invalid Deduction Context

Target: Template classes with constructors involving template parameters and deduction contexts.

Mutation Rule:
1. Identify a template class with a constructor that accepts a template parameter with a default argument.
2. Modify the template parameter to use a non-deducible context for its default argument, causing ambiguity or invalid deduction.
3. Ensure the constructor is instantiated in code to trigger the deduction.

Step-by-Step Instructions:
- Locate a template class definition with a constructor. 
  Example: `template<typename T> class MyClass { MyClass(); };`
  
- Add a template parameter with a default argument that references a non-deducible context.
  Example:
  ```
  template<typename T, bool = sizeof(T) < sizeof(T)>>
  class MyClass {
    MyClass(); 
  };
  ```
  
- Instantiate the constructor without explicitly providing the non-deducible template argument.
  Example: `MyClass<int>();`

Using Existing Elements:
- If existing template classes or functions are available in the seed program, apply the mutation to these elements by modifying their template parameters.
- If introducing new elements, declare them as shown in the examples, replacing generic placeholders with appropriate types that exist within the seed program.

This mutation operator aims to exploit inconsistencies in template argument deduction, particularly those involving default arguments, to trigger compiler crashes related to template instantiation and deduction.