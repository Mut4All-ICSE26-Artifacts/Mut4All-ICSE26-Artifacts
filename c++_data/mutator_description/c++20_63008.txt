Mutation Operator: Modify Initialization of Aggregate Types

Target Code Construct: This mutation operator targets aggregate initialization in new expressions, specifically when initializing structs or classes with multiple members.

Mutation Rule:
1. Identify a point in the code where an aggregate type (e.g., a struct or class) is being initialized using the new expression.
2. Ensure the aggregate type has multiple members and is being initialized with multiple values.
3. Change the initialization syntax to introduce ambiguity by mixing initialization styles. For example, mix direct initialization and list initialization within the same new expression.

Example:
Original Code:
```
struct B {
    int x;
    int y;
};

void bar() {
    auto w = new B(1, 2);
}
```

Mutated Code:
```
struct B {
    int x;
    int y;
};

void bar() {
    auto w = new B(1, {2});
}
```

Explanation: The mutation operator modifies the initialization of the aggregate type by using a mixed style of direct and list initialization. This change aims to explore how the compiler handles ambiguous or potentially confusing initialization styles, which might lead to assertion failures or crashes similar to those observed in the bug report. This mutation is applicable where the aggregate type is non-trivial and supports both direct and list initialization.