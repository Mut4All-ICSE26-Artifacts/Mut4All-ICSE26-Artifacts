Mutation Operator: Modify Template Concept with Template Template Parameters

Target Code Construct:
This mutation operator targets function templates with constrained auto syntax involving concepts that use template template parameters.

Mutation Rule:
1. Identify function templates that use constrained auto syntax with a concept that takes template template parameters.
2. Modify the concept to replace the template template parameter with an ordinary type parameter.
3. Adjust the implementation of the concept to accommodate the change in parameters.
4. Ensure the rest of the function template respects the new concept definition.

Example Transformation:
Original Function Template:
```cpp
void addTo777Show(InvocableWith777<std::plus> auto x) {
  std::cout << 777 + x << std::endl;
}
```

Steps for Mutation:
1. Identify the concept `InvocableWith777` which is using a template template parameter `template <class> typename Op`.
2. Replace the template template parameter `Op` with an ordinary type parameter `OpType`.
3. Modify the concept definition to use `OpType` instead of `Op<void>`.

Mutated Concept:
```cpp
template <typename T, typename OpType>
concept InvocableWith777 = std::is_invocable_v<OpType, decltype(777), T>;
```

Mutated Function Template:
```cpp
void addTo777Show(InvocableWith777<std::plus<void>> auto x) {
  std::cout << 777 + x << std::endl;
}
```

By implementing this mutation, the code is adapted to use a type parameter instead of a template template parameter, which can help in identifying and testing the nuances in handling template parameters by the compiler.