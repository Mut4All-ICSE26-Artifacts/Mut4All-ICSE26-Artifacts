Mutation Operator: Struct with Nested Lambdas in Member Initializer

Target: This mutation operator applies to structs, specifically targeting member initializers that use lambda expressions, potentially nested.

Mutation Rule:
1. Identify a struct that contains a member with an initializer directly involving a lambda expression.
2. Modify the initializer such that:
   - The lambda is nested within another lambda expression.
   - The innermost lambda captures by value (denoted by `[=]`) and utilizes a member of the struct within its body.
3. Ensure that the lambda expressions are invoked immediately within the initializer.

Example of Mutation:
Original Struct:
```
struct Example {
  int x;
  int y = 5;
};
```

Mutated Struct:
```
struct Example {
  int x;
  int y = (10, []() { return [=]() { return x; }(); }());
};
```

In this mutation, we have modified the member initializer `y` to use a nested lambda expression that captures `x` by value. The outer lambda is immediately invoked, returning the result of the inner lambda. This kind of modification exploits the complexity of expression evaluation within initializers, especially involving nested lambdas with captures, which have been known to trigger C++ compiler bugs.