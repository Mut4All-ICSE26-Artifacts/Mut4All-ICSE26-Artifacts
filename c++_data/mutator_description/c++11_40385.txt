Mutation Operator: Recursive Template Instantiation

Target Code Construct: Template Function in a Struct or Class

Mutation Rule:
1. Identify a template member function within a struct or class that uses recursive call patterns.
2. Modify the return type of the function to use `decltype` with a recursive call to the function itself.
3. Use `(*this)(param)` pattern for the recursive call, where `param` is the parameter passed to the function.
4. Ensure the body of the function is not explicitly defined (i.e., leave the function body empty or use a semicolon).
5. Attempt to invoke this member function through an instance of the struct or class with a concrete argument.

Example:

Original Code:
```
struct Action {
    template <typename T>
    auto perform(T t) -> decltype(t);
};
```

Mutated Code:
```
struct Action {
    template <typename T>
    auto perform(T t) -> decltype((*this)(t));
};

void execute(Action a) {
    a.perform(100);
}
```

Explanation:
- The mutation targets a template function within a struct or class.
- The return type is modified to use `decltype` with a recursive call, `(*this)(t)`.
- The function body is left undefined, creating a condition that may trigger infinite instantiation.
- The function is invoked with a concrete argument in a separate function to test the mutation's effect on the compiler.