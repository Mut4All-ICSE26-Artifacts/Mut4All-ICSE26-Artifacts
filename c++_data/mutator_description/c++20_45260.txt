Mutation Operator: Incorrect Template Argument Substitution in Class Template

Target: Class Templates and their Instantiations

Mutation Rule:
1. Identify a class template declaration in the code. For example, a template declaration might look like: `template <typename T> class MyClass;`.
2. Instantiate the template incorrectly by using an invalid template argument. This could involve using an undeclared or invalid type as the template argument. For example, instead of using a correct instantiation like `MyClass<int>`, use `MyClass<InvalidType>`, where `InvalidType` has not been declared previously in the code.
3. Ensure that the instantiation occurs in a context where the compiler will attempt to resolve the template argument, such as in a function or another class.

Example:
Given a seed program with a template:

```cpp
template <typename T>
class ExampleClass;

ExampleClass() ExampleClassInstance;
```

Mutate the instantiation by replacing the valid template argument with an undeclared type:

```cpp
template <typename T>
class ExampleClass;

ExampleClass<UndeclaredType> ExampleClassInstance;
```

This mutation is designed to exploit the compiler's handling of template specialization and instantiation, potentially leading to improper handling or crashes when the compiler attempts to resolve `UndeclaredType`, which does not exist in the program's context.