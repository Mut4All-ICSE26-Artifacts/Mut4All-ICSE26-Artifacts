Mutation Operator: Modify Lambda Expression with Nested Lambdas

Target Code Construct: Lambda Expressions

Mutation Rule:

1. Identify a lambda expression within the code. Ensure it is using C++20 features or above, as indicated by the bug report's context.
2. Within the identified lambda, introduce a nested lambda expression. This helps to check how the compiler handles nested captures, which seems related to the bug.
3. Ensure the inner lambda attempts to capture a variable by reference that is defined outside the outer lambda's scope.
4. The variable to be captured should be a simple type (e.g., int, float) already present in the surrounding scope.

Example:

Original Code:
```cpp
auto lambda1 = []() {
    int x = 10;
    // Some operations using x
};
```

Mutated Code:
```cpp
int outerVar = 20; // Variable defined outside the outer lambda's scope

auto lambda1 = [&outerVar]() { // Outer lambda captures outerVar by reference
    int x = 10;
    auto nestedLambda = [&]() { // Nested lambda introduced
        outerVar += x; // Nested lambda captures x and outerVar
    };
    nestedLambda(); // Call the nested lambda
    // Some operations using x
};
```

Explanation:
- The mutation introduces a nested lambda inside an existing lambda, which captures variables from its enclosing scope. This scenario can stress test the compiler's handling of nested captures and lambda scopes, potentially exposing issues like those described in the bug report. The outer lambda captures `outerVar` by reference, and the nested lambda captures `x` and modifies `outerVar`.