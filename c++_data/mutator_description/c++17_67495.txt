Mutation Operator: Modify Structured Binding in Lambda Capture

Target Construct: Lambda expression capturing structured bindings

Mutation Rule:
1. Identify a lambda expression that captures variables using structured bindings from an existing code construct, such as a function or a local variable, within the main function or another function scope.
2. Replace the structured binding capture in the lambda expression with a direct capture of individual elements, ensuring that each element is captured by reference if the original structured binding was by reference.
3. If the original structured binding was by reference, ensure you replace it with individual elements also captured by reference.

Example:
Original Code Snippet:
```
auto& [x, y] = get_point();
bool b = [x, y] {
    return true;
}();
```

Mutated Code Snippet:
```
auto& [x, y] = get_point();
bool b = [&x, &y] {  // Changed capture to individual references
    return true;
}();
```

Explanation:
- This operator targets lambda expressions that capture structured bindings. 
- By replacing the structured binding capture with individual member captures, we stress-test the compiler's ability to handle structured bindings and lambda captures, which might uncover issues related to capture defaults, scope, or invalidated references.
