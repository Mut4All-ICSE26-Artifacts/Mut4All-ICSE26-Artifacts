Mutation Operator

Target Code Construct: Concepts and Function Templates

Mutation Rule:
1. Identify a function template that uses a concept as a constraint.
2. Modify the concept expression to use an incorrect or unsupported operation between types.

Step-by-Step Instructions:
- Locate a function template that employs a 'requires' clause with a concept constraint.
- Change the constraint so that it includes an invalid operation for the types being compared, which should not be logically applicable.
- Ensure that the operation within the concept expression is syntactically correct yet semantically incorrect, which challenges the compiler's ability to diagnose well-formed constraints.

Example:
Consider a template function with a requires clause:

template <typename T, typename U>
requires requires(T a, U b) {
  { a + b } -> convertible_to<int>;
}

Mutate this by changing the operation '+' to '/', assuming T and U are types where division is not typically supported, such as iterators or other non-arithmetic types:

template <typename T, typename U>
requires requires(T a, U b) {
  { a / b } -> convertible_to<int>;
}

This mutation can lead to scenarios where the compiler encounters unexpected constraints, potentially triggering edge cases in constraint checking logic, particularly if T or U are iterator-like classes or other non-numeric types.