Mutation Operator: Static Variable Incrementation in Consteval Context

Target Code Construct: Function bodies within `consteval` functions.

Mutation Rule:
1. Identify a `consteval` function in the seed program that contains a static variable.
2. Replace the static variable's incrementation operation with a division by zero operation, which involves the static variable.
3. Ensure the division by zero is placed within an expression that results in a side-effect to trigger potential undefined behavior.

Example:

Original Seed Code:
```cpp
consteval int exampleFunc() {
    static int counter = 0;
    return counter++;
}
```

Mutated Code:
1. Locate the static variable incrementation: `counter++`.
2. Replace it with a division by zero operation involving the static variable:
```cpp
consteval int exampleFunc() {
    static int counter = 0;
    return 1 / (counter - counter);
}
```

Purpose: This mutation operator targets potential flaws in handling static variables within constant evaluation contexts, which could lead to a crash when the compiler attempts to interpret the constant expression. The division by zero is chosen to intentionally provoke undefined behavior, which may reveal assertion failures or other vulnerabilities in the constant expression interpreter.