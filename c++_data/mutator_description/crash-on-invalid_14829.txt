Mutation Operator: Modify Overloaded Comma Operators

Target Code Construct: Overloaded operators within a struct.

Mutation Rule:
1. Identify a struct definition that contains overloaded operators, specifically those involving the comma operator.
2. Modify the overloaded comma operator by changing the parameter list to include a variety of types, including basic types (like int, char) and more complex types (such as pointers or user-defined types).
3. Ensure that one of the overloaded operators includes an ellipsis (...) to accept variable arguments.
4. Introduce an overloaded operator function that includes a combination of previously existing operator parameters and new types, ensuring one of the overloaded functions contradicts or overlaps with another in an unexpected way.
5. Check that existing calls to the operator within expressions remain, but adjust argument lists to utilize new types or structures introduced in the overloads.

Example:
Original Code:
```cpp
struct Container {
  friend void operator,(Container, int);
private:
  friend void operator,(Container, ...);
};

const char *msg = (Container(), 42, "test");
```

Mutated Code:
```cpp
struct Container {
  friend void operator,(Container, int);
  friend void operator,(Container, char);
  friend void operator,(Container, Container*);
private:
  friend void operator,(Container, ...); 
};

const char *msg = (Container(), 'A', "mutated");
```

Explanation:
This mutation operator targets the overloading of the comma operator within a struct. It introduces new overloads with different parameter types, including basic types like 'char' and pointers to the struct itself. These changes are designed to stress the compiler's ability to resolve overloaded operators in the presence of potentially conflicting function signatures, potentially exposing weaknesses in operator resolution logic.