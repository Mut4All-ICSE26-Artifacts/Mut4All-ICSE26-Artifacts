Mutation Operator

Target: Function Template Instantiation

Mutation Rule:
1. Identify function template instantiations in the code, specifically those involving nested template classes or functions.
2. Modify the template argument list to include an additional template parameter that is not required by the original template definition. This parameter should be a simple type, such as `int` or `char`.
3. Ensure the new template argument is instantiated in a manner consistent with the surrounding code, preventing any syntax or linkage errors.

Example:
Original Function Template Instantiation:
```cpp
template<typename T>
void process(T value) {
    // Do something with value
}

int main() {
    process(42); // Original instantiation
}
```

Mutated Function Template Instantiation:
```cpp
template<typename T>
void process(T value) {
    // Do something with value
}

int main() {
    process<int, char>(42); // Modified instantiation adding an extra template argument
}
``` 

Note: The mutation should be applied to various template instantiations throughout the code to ensure broad coverage and increased chances of triggering errors related to template handling in the compiler.