Mutation Operator: Modify Template Argument Deduction

Target Code Construct: Template Class Constructor

Mutation Rule: Apply this mutation to template class constructors that use template argument deduction to see if incorrect or unexpected inference leads to compiler crashes.

Step-by-Step Instructions:
1. Identify a template class that has a constructor or deduction guide where template argument deduction is involved.
2. Modify the constructor or deduction guide to introduce a scenario where automatic deduction might be ambiguous or impossible.
3. Specifically, change a parameter type in the constructor or deduction guide from a deduced type to a non-deducible context, such as involving a type conversion or relying on a non-type template parameter.

Example:
Original Code:
```cpp
template <typename T, int> class MyClass {
public:
  MyClass(std::initializer_list<T>);
};

template <typename T> MyClass(T) -> MyClass<Ptr<T>, sizeof(T)>;
```

Mutation Example:
1. Change the constructor parameter type to a type that is deduced from a different context, such as through a pointer or reference conversion.
2. Introduce a new context where `Ptr<T>` involves a type that is not directly deducible, for example, by nested templates or using `decltype`:

```cpp
template <typename T, int> class MyClass {
public:
  MyClass(T*);  // Change from std::initializer_list<T> to T* to create ambiguity in deduction
};

template <typename T> MyClass(T) -> MyClass<decltype(static_cast<Ptr<T>>(nullptr)), sizeof(T)>;
```

By applying this mutation, you increase the likelihood of encountering compiler behavior that struggles with template argument deduction intricacies, potentially leading to a crash in the compilation process. This mutation operator has the potential to cover a wide range of deduction scenarios across different template constructs.