Mutation Operator: Modify Default Template Arguments in Partial Specialization

Target Code Construct: Template alias and function specialization

Mutation Rule:
1. Identify template alias declarations that use default template arguments. This is typically seen in lines that define type aliases using `template <typename T2 = T> using AliasName = TypeExpression;`.
2. Locate points in the code where these aliases are utilized, especially in function parameters or return types.
3. Change the default template argument to a dependent type, or an expression that refers to the template parameter itself in a more complex manner.
4. If the alias is used in a function parameter list, ensure that the function is called with parameters that force the use of default arguments.

Example of Mutated Content:
Original:
```
template <typename T>
struct point {};

template <typename T2 = T>
using pt = point<3, T2>;

static int test(const pt<>&) {
    return 0;
}
```

Mutated:
```
template <typename T>
struct point {};

template <typename T2 = T*>
using pt = point<3, T2>;

static int test(const pt<>&) {
    return 0;
}
```

Explanation:
- The mutation changes the default argument `T2 = T` to `T2 = T*`, introducing a more complex dependency on the template parameter `T`.
- This mutation is designed to test the compiler's ability to correctly instantiate template specializations with dependent default arguments in use contexts that do not explicitly provide the argument, potentially leading to crashes due to mismanagement of dependent types.