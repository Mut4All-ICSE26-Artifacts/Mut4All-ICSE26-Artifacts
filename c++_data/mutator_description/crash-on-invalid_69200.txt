Mutation Operator: Negative Array Size Declaration
Target Construct: Array declarations in global and local scopes.
Mutation Rule:
1. Identify any array declaration in the code. The declaration should be in the form of `type identifier[size];`.
2. For the size, replace the current value with a negative integer value, ensuring it's not zero or positive. For example, change `int arr[10];` to `int arr[-1];`.
3. Ensure the rest of the code remains intact, and do not alter the type or the identifier name.
4. If the original array size is an expression (e.g., `int arr[x + y];`), replace the expression with a negative constant directly, such as `int arr[-5];`.

Example:
Original:
```
void sampleFunction() {
    float data[5];
}
```

Mutated:
```
void sampleFunction() {
    float data[-5];
}
```

This mutation operator exploits the way compilers handle invalid array sizes, particularly negative sizes, which may lead to unexpected behavior or crashes during semantic analysis or code generation phases. The goal is to trigger assertions or error-handling paths in the compiler that are not robust against this type of error.