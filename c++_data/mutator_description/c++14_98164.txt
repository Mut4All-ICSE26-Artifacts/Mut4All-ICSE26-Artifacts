Mutation Operator:
Target: Template Declaration with Invalid Parameter
This mutation operator applies to template function declarations.

Mutation Rule:
1. Identify a template function declaration in the code, e.g., `template <typename T> auto func();`.
2. Modify the template parameter list by introducing an invalid type name instead of a valid placeholder type. For instance, replace `typename T` with `unknownType T`.
3. Mark the function as deleted, e.g., `template <unknownType T> auto func() = delete;`.
4. Attempt to instantiate the function using a valid template argument, e.g., `decltype(func<int>()) var;`.

Example:
Original Code:
```cpp
template <typename T> auto dummyFunc() { return T(); }
decltype(dummyFunc<int>()) var;
```

Mutated Code:
```cpp
template <unknownType T> auto dummyFunc() = delete;
decltype(dummyFunc<int>()) var;
```

Note: This mutation intentionally introduces an invalid template parameter type to exploit potential weaknesses in the compiler's handling of template instantiations and error recovery.