Mutation Operator
Target: Function Template Specialization
Description: Modify the template specialization of a function to include a nested template that imposes a constraint using a requires clause. This modification can expose issues within the compiler's handling of constraints and template specializations.

Mutation Rule:
1. Identify a function template within the seed program.
2. Introduce a new template parameter to the function template that is itself a template.
3. Add a requires clause that uses this new template parameter in a nested manner, imposing a constraint.
4. Ensure that the nested template and the constraint are syntactically valid, but complex enough to test the compiler's ability to manage nested constraints.

Example:
Given a seed program with the following function template:

```cpp
template <typename T>
void exampleFunction(T param) {
    // Function implementation
}
```

Apply the mutation:

1. Add a template parameter that is a template itself:

```cpp
template <template <typename> class NestedTemplate, typename T>
```

2. Modify the function to include a requires clause with a nested constraint:

```cpp
template <template <typename> class NestedTemplate, typename T>
requires requires {
    typename NestedTemplate<T>::type;
}
void exampleFunction(T param) {
    // Function implementation
}
```

This mutation operator targets the complexities of template specialization and constraint evaluation, increasing the likelihood of uncovering compiler bugs related to template handling. Adjust the names and types as necessary to fit the context of the seed program while following the mutation rule's structure.