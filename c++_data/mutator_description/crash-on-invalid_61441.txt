Mutation Operator: Modify Lambda Parameter Types to Unsupported Types

Target Code Construct: Lambda expressions within template functions.

Mutation Rule:
1. Identify any lambda expressions within a template function in the seed program.
2. Locate the parameter list of the lambda expression.
3. Choose one parameter type in the list and replace it with a type that is likely unsupported or uncommon in standard contexts, such as `__fp16` or any other implementation-specific or deprecated types (if available).
4. Ensure that this substitution does not introduce undeclared types by checking the seed program for any specialized types or verifying against known standard or compiler-specific types.
5. Retain the original lambda body (e.g., `return` statements) and any existing variables used inside.

Example (in pseudo-code for clarity):
Before mutation:
```
template <typename T>
void exampleFunction() {
  auto lambda = [&](int a) { return a + 1; };
}
```

After mutation:
```
template <typename T>
void exampleFunction() {
  auto lambda = [&](__fp16 a) { return a + 1; };
}
```

Note: This mutation specifically targets the parameter type within the lambda and assumes that `__fp16` or equivalent might not be fully supported or is targeted for testing edge cases in the compiler's handling of certain types.