Mutation Operator 1: Modify Function Template Instantiation and Overloaded Operators

Target Construct: Function Templates and Overloaded Operators

Mutation Rule:
1. Identify a function template in the codebase. This is typically a function declared with the `template` keyword, followed by template parameters inside angle brackets (`<>`).

2. Within the function template, locate any usage of overloaded operators. These are operators such as `+`, `-`, `*`, `|`, etc., that are redefined for custom types or templates.

3. Modify the overloaded operator usage by introducing a new operator overload that deals with a combination of existing types and an additional, different type. For instance, if the function template uses `operator|`, and it combines two template parameters `T1` and `T2`, introduce a new overload of `operator|` that combines `T1` with a new type `T3`.

4. Ensure that `T3` is a type that does not implicitly convert to `T1` or `T2`. This can be an existing type in the seed program or a newly declared struct or class with a simple implementation.

5. Instantiate the template function in the code with combinations of types that include `T3` to trigger the new operator overload.

Example in Pseudo-code:

```cpp
template<typename T1, typename T2>
void exampleFunction(T1 a, T2 b) {
    auto result = a | b; // Original operator overload usage
}

// Introduce a new overloaded operator for a new type
struct NewType {
    int value;
};

template<typename T1>
T1 operator|(const T1& lhs, const NewType& rhs) {
    return lhs; // Simple implementation for demonstration
}

// Instantiate the function with a new type to trigger the overload
exampleFunction<int, NewType>(5, NewType{10});
```

Explanation:
This mutation operator targets the function template instantiation step and specifically modifies overloaded operators to introduce additional operator overloads involving a new type. This alteration is aimed at testing the compiler's handling of complex template instantiations and overloaded operator dispatch, which are potential crash points, as inferred from the bug report stack trace related to operator instantiation and template transformations. This mutation has high coverage as it involves multiple template and operator contexts, making it versatile across different seed programs.