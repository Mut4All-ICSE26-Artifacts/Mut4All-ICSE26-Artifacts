Mutation Operator: Modify Variadic Template Friend Function

Target Construct: Variadic Template Friend Function inside a Variadic Template Struct

Mutation Rule:
1. Identify a variadic template struct that includes a variadic template friend function.
2. Modify the friend function's template parameter pack to introduce a mismatch condition between the lengths of parameter packs.
3. Specifically, ensure there is a discrepancy between the number of elements in the parameter pack used in the template declaration and the parameter pack used in the function signature. For instance, if the original code has a function declared as `friend bool operator==(a, a<Us...>)`, modify it to a non-matching pack length context, such as `friend bool operator==(a, a<Us, Ts...>)`.
4. Ensure the change reflects the length mismatch in the function's parameter list or requires clause, causing the compiler to address pack expansions of different sizes, potentially triggering similar assertion failures or internal errors.

Example:
Original:
```cpp
export template<typename... Ts>
struct S {
    template<typename... Us> requires (... and c<Ts, Us>)
    friend bool operator==(S, S<Us...>) {
        return true;
    }
};
```

Mutated:
```cpp
export template<typename... Ts>
struct S {
    template<typename... Us> requires (... and c<Ts, Us>)
    friend bool operator==(S, S<Us, Ts...>) { // Introduces a mismatch in lengths
        return true;
    }
};
```

This mutation operator aims to exploit potential weaknesses in handling variadic templates and friend functions, especially when parameter packs of differing lengths are involved, which are prone to causing assertion failures or crashes in the compiler during template instantiation or expansion phases.