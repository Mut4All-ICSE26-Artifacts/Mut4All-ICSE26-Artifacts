Mutation Operator 1: Modify Template Specialization with Non-Type Template Parameters

Target Code Construct: Template Specialization with Non-Type Template Parameters

Mutation Rule:
1. Identify a template specialization with a non-type template parameter.
2. Change the specialization by introducing a small arithmetic operation or transformation on the non-type parameter in the specialized template itself, making sure the operation doesn't alter the logical intent but changes the structure.

Example:
Original Code:
```cpp
template<int N>
struct A {
    // Original code here...
};

template<>
struct A<0> {
    // Original code here...
};
```

Mutation Steps:
1. Locate the template specialization for `A<0>`.
2. Modify the specialization by changing the specialization non-type parameter through simple arithmetic or conditional logic.

Mutated Code:
```cpp
template<int N>
struct A {
    // Original code here...
};

template<>
struct A<(0 + 0)> { // Introduce a trivial arithmetic operation
    // Original code here...
};
```

Explanation:
In this mutation, we slightly transform the template specialization parameter by using arithmetic, such as adding zero. While it doesn't change the functionality, it introduces variability in template usage and can expose compiler edge cases related to template handling. This mutation is targeted and ensures that the change is valid in terms of type and semantics.