Mutation Operator: Template Instantiation with Unused Type Parameter

Target Code Construct: Template classes with unused type parameters. This mutation operator applies within template definitions where a type parameter is declared but not explicitly used.

Mutation Rule:

1. Identify a template class or struct with one or more type parameters.
2. Add a function or method within the template class that makes use of the type parameter, even if it's a dummy usage.
3. Implement a simple operation or usage of this type parameter to ensure it's included in the class. For example, declare a local variable of the type parameter within a function.

Example:

Original Code:
```cpp
template <typename T> struct MyStruct {
  void doSomething() {
    // Original function implementation
  }
};
```

Mutated Code:
```cpp
template <typename T> struct MyStruct {
  void doSomething() {
    T dummyVar; // Introduce usage of the type parameter
    // Original function implementation
  }
};
```

Explanation:
- In the original code, `T` is a template parameter that might not be used in any meaningful way within `MyStruct`.
- The mutation operator introduces a local variable `dummyVar` of type `T` in the `doSomething` function to ensure that the type parameter is utilized.
- This mutation is designed to exploit potential weaknesses in how compilers handle unused template parameters and their impact on type-dependent operations, possibly uncovering bugs in template instantiation and type resolution mechanisms.