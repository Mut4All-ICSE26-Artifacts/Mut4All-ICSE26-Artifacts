Mutation Operator

Target: Function Parameter Type Mismatch

This mutation operator targets function calls involving parameter types that do not match the expected types in function overloads. The goal is to induce type mismatches that trigger compiler bugs.

Mutation Rule:
1. Identify a function call in the program that takes parameters, preferably overloaded.
2. Replace one or more of the argument types with a type that is incompatible with the expected parameter type of the function.
3. Ensure the new type is a valid type in the context of the program. If introducing a basic type, such as `int`, `double`, or `std::string`, ensure it is defined or included in the context.
4. If the necessary type is not available, declare it in the scope where the mutation is applied.

Example:
Original Code:
```
void process(int x);
void process(double y);

int main() {
    process(3.14); // Calls process(double y)
}
```

Mutated Code:
```
void process(int x);
void process(double y);

int main() {
    process("string"); // Replace with an incompatible type
}
```

This operator is designed to test how the compiler handles type mismatches in function calls, which is a common area where compiler bugs can occur, especially in overload resolution.