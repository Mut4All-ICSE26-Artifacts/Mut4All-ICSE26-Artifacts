Mutation Operator: Modify Template Parameter Usage in Lambdas

Target Code Construct: Templated Lambda Functions

Mutation Rule:
1. Identify a templated lambda function in the seed program. This function should have a template parameter being used in some way. In this example, the lambda `test_lambda_impl1` has a template parameter `<int f>`.
2. Introduce a conditional or logical operation that uses the template parameter within the lambda's body. This operation should modify how the template parameter affects the lambda's logic. 
3. For illustration, if the original lambda uses the template parameter directly in a method call, introduce an additional computation using the template parameter before using it.
4. Ensure that the changes are syntactically correct and maintain existing variable types and declarations within the lambda's body.

Example:

Original Templated Lambda:
auto example_lambda = [&]<int T>(int a) {
    perform_action<T>(a);
};

Mutated Templated Lambda:
auto example_lambda = [&]<int T>(int a) {
    int modified_value = (T % 2 == 0) ? a + T : a - T;
    perform_action<T>(modified_value);
};

In this mutation, we add a conditional operation that alters the input `a` based on the template parameter `T` before it is used in `perform_action`. This mutation leverages existing variables and introduces a simple conditional operation that can expose edge cases in the compiler's handling of templated lambdas.