Mutation Operator: Reference to Non-const Assignment Change

Target: This mutation operator targets reference variable declarations and assignments.

Mutation Rule:
1. Locate a reference variable declaration in the code. The syntax is `Type& refVar = someExpression;`.
2. Change the reference variable to a non-reference variable. This changes the declaration to `Type var = someExpression;`.
3. Ensure that the non-reference variable type matches the type returned by `someExpression`.
4. Remove any further assignments to the reference that may cause issues due to the changes, as the reference is no longer bound to the original object.

Example:
Original Code:
TypeA& refVar = someFunction();

Mutated Code:
TypeA var = someFunction();

Explanation: In the original code, `refVar` is a reference to the result of `someFunction()`. The mutated code changes `refVar` to a non-reference variable `var`, which stores a copy of the result. This mutation avoids potential segmentation faults related to reference handling by converting the reference to a standard variable, ensuring more stable behavior during assignments.