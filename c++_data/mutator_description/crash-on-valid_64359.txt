Mutation Operator: Transform Function Template Instantiations

Target: Template Function Declarations and Instantiations

Mutation Rule:
1. Locate a function template declaration within the seed program. This function should be defined with template parameters, such as `template<typename T>`.
2. Identify an instantiation of this function template, where the function is called with a specific template argument, for example, `MyFunction<int>()`.
3. Modify the instantiation by:
   a. Introducing another function with a similar name but with additional different operations or different return types.
   b. Use conditional compilation to selectively instantiate different versions based on a defined macro.

Example:
Original Template Declaration:
```cpp
template<typename T>
void MyFunction(T value) {
    // Original implementation
}
```
Original Instantiation:
```cpp
MyFunction<int>(100);
```

Mutation Steps:
1. Add a new function version:
```cpp
template<typename T>
void MyFunction(T value, int extra) {
    // Modified implementation, e.g., using 'extra' in a computation
}
```
2. Use conditional compilation:
```cpp
#define USE_EXTRA_VERSION

#ifdef USE_EXTRA_VERSION
MyFunction<int>(100, 42);
#else
MyFunction<int>(100);
#endif
```

Explanation:
This mutation operator targets template function declarations and their instantiations. By introducing variations in template function calls through overloading or conditional compilation, we simulate conditions that may stress test the template instantiation mechanism in the compiler, potentially exposing issues related to template argument deduction and function overload resolution that can lead to compiler crashes.