Mutation Operator

Target Construct: Lambda Expressions

Mutation Rule:
1. Identify a lambda expression within the source code.
2. Modify the lambda's parameter list to include a dependent type, ensuring that the type depends on an uninstantiated template parameter.
3. Introduce a requires clause in the lambda's noexcept specification that depends on this newly introduced template parameter.
4. Instantiate the lambda with a concrete type that does not satisfy the requires clause, leading to a potential crash due to value dependency issues.

Example:
Original Code:
```
void exampleFunction(auto param) {
  []<typename T>(T value) noexcept(
      requires { requires requires { typename T::type; }; }) {}(param);
}
```

Modified Code:
```
void exampleFunction(auto param) {
  []<typename T>(T value) noexcept(
      requires { requires requires { typename T::dependentType; }; }) {}(param);
}
```
In this example, `typename T::dependentType` is introduced as a dependent type that is not present in the instantiated type, potentially triggering a compiler bug related to value-dependent expressions.