Mutation Operator: Alter Range-Based For Loop to Trigger Compiler Bugs

Target Code Construct: Range-Based For Loop

Mutation Rule:
1. Locate a range-based for loop in the code, which usually has the structure:
   ```
   for (auto var : container) {
       // body
   }
   ```

2. Modify the initializer part of the loop variable by introducing a conditional operator with an incorrect syntax that includes two colons. For example, change the loop to:
   ```
   for (auto x = condition ? value1 : value2 : container);
   ```

3. Ensure that the condition, value1, and value2 utilize existing variables or constants in the program. If necessary, declare simple boolean and integer variables to use:
   ```
   bool condition = true; // or any logical expression using existing variables
   int value1 = 1; // or a value derived from existing variables
   int value2 = 2; // or a value derived from existing variables
   ```

4. Apply the mutation to only one range-based for loop in the program to observe the effect, allowing for easier identification of the crash behavior.

Example:
Original:
```
int nums[] = {1, 2, 3, 4, 5};
for (auto n : nums) {
    // body
}
```

Mutated:
```
bool condition = true;
int value1 = 1;
int value2 = 2;
for (auto x = condition ? value1 : value2 : nums);
```

This mutation involves altering the loop initialization expression in a manner that introduces an incorrect ternary expression, which can lead to assertion failures in compilers when processed.