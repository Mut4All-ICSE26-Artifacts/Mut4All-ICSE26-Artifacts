Mutation Operator: Inline Attribute with Overloaded Functions

Target Code Construct: This mutation operator targets overloaded functions in C++ programs, specifically functions that utilize the `[[clang::always_inline]]` attribute.

Mutation Rule:
1. Identify overloaded functions in the seed program. An overloaded function is a set of functions with the same name but different parameter lists.
2. Select one of the overloaded functions to modify. Ensure it calls another function with the same name and includes the `[[clang::always_inline]]` attribute.
3. Add or modify the `[[clang::always_inline]]` attribute to an overloaded function such that it calls another overloaded version of itself from within its implementation.
4. Ensure the function call within uses one of the existing overloaded function signatures.

Example Transformation:
Given the following seed program:
```
void example(int a) {}

template<typename T>
void example(T t) {
  example(static_cast<int>(t));
}
```

Apply the mutation operator:
```
void example(int a) {}

template<typename T>
void example(T t) {
  [[clang::always_inline]] example(static_cast<int>(t));
}
```

In this transformed example, the template function `example` has been modified to include the `[[clang::always_inline]]` attribute, which potentially triggers a crash when the compiler attempts to inline the function call due to the presence of multiple overloaded versions. This mutation operator relies on leveraging existing overloads and attributes to explore potential compiler error paths.