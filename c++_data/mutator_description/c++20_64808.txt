Mutation Operator: Modify Template Parameter Pack Expansion in Function Templates

Target Code Construct: Function templates

Mutation Rule:
1. Identify a function template in the seed program that uses parameter packs. This function should have at least one template parameter pack, for example, `template<typename... Ts> void foo(Ts... args)`.
2. Alter the function definition by introducing an unexpected expansion of the parameter pack within the function body. This can be done by attempting to use the parameter pack in an unsupported context, such as in a nested lambda that does not capture the necessary scope or using it in an arithmetic operation.
3. Ensure that the mutation involves the parameter pack directly within an expression or statement inside the function body. For example, replace an existing line in the function body with a line that uses the parameter pack in a manner that might confuse the template instantiation process.

Example:
Original function template:
```
template<typename... Ts>
void process(Ts... args) {
    // Original operation
    (print(args), ...);
}
```
Mutated function template:
```
template<typename... Ts>
void process(Ts... args) {
    // Mutated operation with an unexpected parameter pack expansion
    auto lambda = [](auto... ps) { return (ps + ...); };
    lambda(args...); // Attempts to expand args in the context of a lambda
}
```

The mutation exploits the C++20 feature of folding expressions and parameter pack expansions, potentially triggering issues related to template instantiation, particularly when involving concepts and function templates. This is likely to stress the compiler, as seen in parsing and constraint satisfaction phases, especially when parameter packs are unwisely expanded outside their intended scope or usage context.