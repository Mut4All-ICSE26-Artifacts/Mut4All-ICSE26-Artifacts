Mutation Operator: Recursive Template and Lambda

Target Code Construct: This mutation operator targets recursive template instantiations and lambda expressions within template functions.

Mutation Rule: 

1. Identify a function template that accepts a generic type parameter. This template should contain a lambda expression.

2. Replace the lambda expression within the template function with a recursive call to the same template function, passing the lambda itself as the argument.

3. Ensure the lambda expression is empty, meaning it has no parameters and no body statements.

4. Insert this modified recursive template function call within a struct or function that invokes it to trigger the compilation process.

Example:

Original Code Snippet:
```cpp
template <typename T>
auto myFunction(T param) {
    // Original lambda
    [=] {};
}

struct MyStruct {
    myFunction(5);
}
```

Mutated Code Snippet:
```cpp
template <typename T>
auto myFunction(T param) {
    // Replace original lambda with recursive call
    myFunction([=] {});
}

struct MyStruct {
    myFunction(5);
}
```

Explanation: This mutation operator creates a scenario of a recursive template instantiation with a lambda expression. By making the lambda expression recursively call the function template, we stress-test the compiler's template instantiation and type deduction mechanisms, which could lead to issues like stack overflow or improper handling of recursive templates. This mutation is widely applicable to any code base with template functions and lambda usage, thus providing broad coverage for compiler testing.