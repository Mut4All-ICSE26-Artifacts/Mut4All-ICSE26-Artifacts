Mutation Operator: Modify Template Parameter Indexing

Target Construct: Template Function with Parameter Pack

Mutation Rule:
1. Identify a template function that utilizes a parameter pack and attempts to index into the pack. The target is the indexing operation where a specific element from the parameter pack is accessed.
2. Change the index used in this operation to a value larger than the number of elements in the parameter pack to test for boundary conditions.
3. Ensure that this index modification is reflected in all references within the function, particularly where the element is accessed or returned.

Example:
Original:
```cpp
template<size_t I, class... Ts>
Ts...[I]& getElement(tuple<Ts...>& t) {
  return t.__element;
}

void exampleFunc() {
  tuple<int, double> values;
  getElement<0>(values);
}
```

Mutated:
```cpp
template<size_t I, class... Ts>
Ts...[I]& getElement(tuple<Ts...>& t) {
  return t.__element; // Access element at position I in the parameter pack
}

void exampleFunc() {
  tuple<int, double> values;
  getElement<2>(values); // Change index to exceed the number of elements in the parameter pack
}
```
This mutation operator exploits potential compiler issues with handling template parameter pack indexing beyond its bounds, which can lead to crashes or undefined behavior.