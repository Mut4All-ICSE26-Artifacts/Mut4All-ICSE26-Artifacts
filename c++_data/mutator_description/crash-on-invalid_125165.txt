Mutation Operator: Modify Structured Binding with Fold Expressions

Target: This mutation operator targets structured bindings within templates that incorporate fold expressions.

Mutation Rule:
1. Identify a function template that uses structured bindings to decompose an input parameter.
2. Ensure that the structured binding operates on a type that can be decomposed, such as an array or class type.
3. Introduce a fold expression in the function template body that operates on the structured binding.
4. Modify one of the operands in the fold expression to a constant that cannot be decomposed in the context of the structured binding.

Step-by-Step Instructions:
- Locate a function template utilizing structured bindings. Example:
  ```
  template <typename T>
  void process(T input) {
      const auto& [a, b] = input;
  }
  ```
- Introduce a fold expression using the structured binding pack. Example:
  ```
  (a + b, ...);
  ```
- Change one operand in the fold expression to a constant that mismatches the decomposable type, simulating an invalid operation. Example:
  ```
  const auto& [a, b] = input;
  (1.0, ...); // Modify the fold expression
  ```

Example:
- Original Code:
  ```
  template <typename T>
  void sum(T input) {
      const auto& [x, y] = input;
      (x + y, ...);
  }
  ```
- Mutated Code:
  ```
  template <typename T>
  void sum(T input) {
      const auto& [x, y] = input;
      (10, ...); // Mutated fold expression
  }
  ```

By altering the fold expression to include a constant, the mutation aims to trigger invalid operations that are likely to result in C++ compiler bugs.