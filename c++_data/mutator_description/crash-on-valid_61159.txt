Mutation Operator: Modify Template Function Return Type

Target Code Construct: Template function within a nested templated class

Mutation Rule:
1. Identify a template function within a nested templated class structure in the seed program. This function should return a templated type, such as `std::array` or another standard library templated container.
2. Change the template parameter of the return type to a different but syntactically valid type. For example, if the return type is `std::array<int, ct>`, mutate `int` to another basic type such as `float`.
3. Ensure that the rest of the function's logic remains unchanged, except for the return type. The mutation must keep the function's logic syntactically correct, even if it becomes semantically incorrect.

Example Mutation:
Original Code:
```cpp
template <int ct>
auto do_something() -> std::array<int, ct> {
    return std::array<int, ct>{};
}
```

Mutated Code:
```cpp
template <int ct>
auto do_something() -> std::array<float, ct> {
    return std::array<float, ct>{};
}
```

The mutation changes the integral type used in the `std::array` template parameter to `float`, which can potentially trigger bugs related to template argument handling in the compiler's template instantiation process.