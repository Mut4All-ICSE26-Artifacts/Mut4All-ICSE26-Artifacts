Mutation Operator: Modify Concept Satisfaction in Template

Target Code Construct: Template concepts and constraints

Mutation Rule: Modify the concept satisfaction requirement within a template constructor by introducing an additional static assertion that is false under certain conditions. This targets potential weak points in the concept satisfaction evaluation, especially when interacting with the `requires` clause in templates.

Step-by-Step Instructions:
1. Identify a class template that uses a concept with a `requires` clause, similar to `struct constrained` in the bug report.
2. Inside the template constructor, add a new static assertion that introduces a condition based on a template parameter that is not directly related to the concept itself.
3. Ensure the static assertion condition can be false for certain template instantiations, potentially invalidating the constraint satisfaction logic of the compiler.
4. For example, introduce a condition using a type trait that is expected to fail based on specific characteristics of the template parameter.

Example:
```
template<typename T>
struct Example {
    template<typename U> requires matches<U>
    explicit Example(U value) {
        // Existing constructor logic
    }
};

// Mutation - Add a static assertion
template<typename T>
struct Example {
    template<typename U> requires matches<U>
    explicit Example(U value) {
        static_assert(sizeof(T) > 4, "T must be larger than 4 bytes"); // Mutated condition
    }
};
```
Note: This example illustrates the modification of the constructor by adding a static assertion that can fail, which may trigger a bug in the concept satisfaction evaluation within the compiler. Ensure the condition is specific enough to trigger compiler crash scenarios similar to those described in the bug report.