Mutation Operator: Modify Vararg Operator in Friend Functions

Target Code Construct: Friend Function with Vararg Operator

Mutation Rule:
1. Identify the section of the code where a friend function is declared inside a struct or class. Specifically, look for friend functions that utilize vararg (ellipsis `...`) operators.
2. For the chosen friend function, replace the vararg operator with a fixed parameter type to create a direct, non-vararg overload.
3. Ensure that the modified function signature can still be syntactically correct within its usage context, but might semantically mislead or cause issues.

Example:
Original Code:
```
struct Example {
  friend void operator,(Example, ...);
};
```

Mutated Code:
```
struct Example {
  friend void operator,(Example, int);
};
```

Explanation:
In this mutation, the friend function that originally utilized a vararg operator is transformed to accept a specific data type (e.g., `int`). This change can potentially lead to issues in compiler handling due to the altered overload resolution and the specific nature of friend functions. The mutation does not introduce new elements but uses the existing structure and modifies the operator signature to be more deterministic, potentially exposing areas in the compiler that incorrectly handle such adjustments.