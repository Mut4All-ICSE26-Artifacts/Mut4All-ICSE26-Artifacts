Mutation Operator: Modify Function Template Instantiation

Target Code Construct: Function Template

Mutation Rule:
1. Identify a function template declaration in the seed program. It should have template parameters and be instantiated in the program.
2. Introduce a new type alias (using statement) within the template using a dependent type that involves one of the template parameters.
3. Use this type alias within the function template to define a variable or a return type.
4. Ensure the instantiated template uses different specializations, including those that might not provide a straightforward match for the dependent type.

Example:
Original Function Template:
```cpp
template <typename T>
T add(T a, T b) {
    return a + b;
}
```

Mutation Steps:
1. Introduce a type alias within the template:
   ```cpp
   template <typename T>
   class Wrapper {
   public:
       using ValueType = T;
   };
   ```
2. Modify the function template to use this alias:
   ```cpp
   template <typename T>
   typename Wrapper<T>::ValueType add(T a, T b) {
       typename Wrapper<T>::ValueType result = a + b;
       return result;
   }
   ```
3. Instantiate the template with various types including fundamental and user-defined types:
   ```cpp
   int main() {
       add(1, 2); // Instantiation with int
       add(1.1, 2.2); // Instantiation with double
   }
   ```
This mutation operator targets the handling of dependent types and type aliases within templates, which are known to be complex areas in C++ and can often expose compiler bugs related to template instantiation and type deduction.