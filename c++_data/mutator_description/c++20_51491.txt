Mutation Operator

Target Construct: Template Specialization and Export Declarations
Applicable Context: Applies to template specializations and export declarations within non-module code.

Mutation Rule:
1. Identify any template declaration within a C++ source file that is not part of a module.
2. For each identified template declaration, append an export keyword to its specialization or instantiation. Ensure that the export keyword is placed before the template keyword, following the syntax `export template <...>`.
3. Insert a syntax error after the export keyword, such as an incomplete expression or incorrect character, to ensure the mutation stimulates a parsing error leading to a potential crash.

Example:
Given Original Code:
```
template <typename T>
class MyClass {
    // some class definition
};

template <>
class MyClass<int> {
    // specialized class definition
};
```

Transformed Code with Mutation:
```
template <typename T>
class MyClass {
    // some class definition
};

export template <>
class MyClass<int> { =
    // specialized class definition
};
```

Rationale: This mutation operator leverages the incorrect placement of the export keyword outside a module and introduces a syntax error, both of which are known to stress C++ compilers due to their complexity in handling template and module-related declarations. This type of mutation is likely to maximize coverage for bugs related to template specialization and module exports, particularly focusing on crash scenarios within the compiler's frontend processing stages.