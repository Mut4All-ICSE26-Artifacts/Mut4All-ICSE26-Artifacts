Mutation Operator: Increase Template Instantiation Depth

Target Construct: Function Template

Mutation Rule:
1. Identify a function template in the seed program. For example, a function template might look like:
   ```cpp
   template<typename T>
   T recursiveFunction(T value) {
       // Base case
       if (value <= 0) return T(0);
       // Recursive case
       return value + recursiveFunction(value - 1);
   }
   ```
2. Modify the function template to increase the depth of recursion or template instantiation. This can be achieved by adding additional conditional checks that lead to deeper recursion or by introducing additional nested template instantiation.
3. For instance, introduce an additional recursive call or increase the complexity of the recursion:
   ```cpp
   template<typename T>
   T recursiveFunction(T value) {
       if (value <= 0) return T(0);
       // Additional recursive depth
       if (value % 2 == 0) return value + recursiveFunction(value - 1) + recursiveFunction(value - 2);
       return value + recursiveFunction(value - 1);
   }
   ```
4. Ensure that the main function or calling context uses a high enough value to force deeper recursion:
   ```cpp
   int main() {
       int result = recursiveFunction(250); // Increase the value to trigger deeper recursion
       return result;
   }
   ```

By applying this mutation operator, the template instantiation depth will increase, which can potentially expose issues related to recursion limits and cause the compiler to crash, particularly with aggressive optimizations or when the recursion depth approaches or exceeds internal limits.