Mutation Operator: Member Function Parameter Type Mutation

Target Code Construct: Member operator overloads within class definitions.

Mutation Rule:
1. Identify a class that defines an overloaded operator, such as operator delete.
2. Locate the operator function's parameter list.
3. Change the type of the first parameter to an incompatible or unusual type that the operator expects, ensuring it remains a valid type in the current scope.
4. For instance, if the operator delete expects a pointer type or a different class type than the one provided, replace it with a basic built-in type like `int` or `double`.

Example:
Original Code:
```
struct MyClass {
    void operator delete(int) {}
};
```

Mutation Process:
1. Locate the operator delete function within the MyClass definition.
2. Identify the first parameter, which is of type `int`.
3. Change the type of the first parameter to a class type that is unrelated to the expected type.
4. Ensure the new type is declared or included in the current scope.

Mutated Code:
```
struct UnrelatedClass {};

struct MyClass {
    void operator delete(UnrelatedClass) {}
};
```

This mutation will explore how the compiler handles unexpected types in operator overloads, potentially exposing crash scenarios similar to the one in the bug report.