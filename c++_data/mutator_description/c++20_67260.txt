Mutation Operator

Target: Template Metaprogramming Constructs

Description: Modify the template parameter pack and template instantiation patterns to potentially trigger out-of-bounds or incorrect substitutions during template instantiation, which are common issues in complex template metaprogramming.

Mutation Rule:
1. Identify a template alias or a struct where a parameter pack is expanded, such as in IndexSequence, MakeIndexSequence, or any similar structures.
2. Introduce an additional template argument to the parameter pack expansion, creating a mismatch between expected and actual parameters.
3. Ensure that the additional argument does not match the type constraints of the existing template alias or struct, if any, to exacerbate type resolution issues.

Example:
Original:
```cpp
template <unsigned... Is, typename... Ps>
struct InheritFromPacks<IndexSequence<Is...>, Ps...>
    : InheritFromUniqueEntries<Is, Ps, IndexSequence<>>... {};
```

Mutated:
```cpp
template <unsigned... Is, typename... Ps>
struct InheritFromPacks<IndexSequence<Is..., 999>, Ps...>
    : InheritFromUniqueEntries<Is, Ps, IndexSequence<>>... {};
```

Application: By adding an out-of-bounds or incompatible value (e.g., `999`) within the parameter pack expansion, we increase the likelihood of triggering index-related errors or template instantiation issues that could lead to compiler crashes, especially in the presence of complex template deductions and type resolutions.