Mutation Operator: Modify Template Specialization with Default Parameters

Target Code Construct: Template class specialization with default parameters.

Mutation Rule:
1. Identify a template class that has specialization based on a template parameter condition. For example, a class template `l` that is specialized based on a boolean template parameter.
2. Locate the primary template and its specialization. In the provided code, `template <class h, class k, bool = f<k>> struct l;` is the primary template, and `template <class h, class k> struct l<h, k, false> : g {};` is the specialization.
3. Introduce a new default value for a template parameter in the primary template declaration. If the parameter already has a default value, change this value. Ensure that this change still allows for a valid specialization.
4. Apply the mutation such that the original logic of specialization remains valid, but the instantiation path may change to test different compiler pathways.

Example:
Original Code:
```cpp
template <class h, class k = h, bool = f<k>> struct l;
template <class h, class k> struct l<h, k, false> : g {};
```

Mutated Code:
```cpp
template <class h, class k = int, bool = f<k>> struct l;
template <class h, class k> struct l<h, k, false> : g {};
```

Explanation:
In this mutation, the default template parameter for `k` has been changed from `h` to `int`. This alteration forces different instantiations of `l` if the primary template is instantiated without explicitly providing the `k` parameter. This change can trigger different compiler paths, potentially exposing assertion failures or other bugs related to template instantiation and specialization.