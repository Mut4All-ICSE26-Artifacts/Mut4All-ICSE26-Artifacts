Mutation Operator  
Target Code Construct: Template Function with `auto` Return Type

Mutation Rule:  
1. Identify a template function that uses `auto` as a return type, especially one that involves operations or references to template parameters.
2. Modify the return type of the template function to be explicitly incorrect or semantically conflicting with the expected return type. This can include:
   - Using an operation on the template parameter that is illegal or would not deduce to a valid type.
   - Referencing a template parameter in a context where it does not provide enough information to deduce a concrete type.

Example Mutation:  
Original:
```cpp
template <auto T> auto func() { return T; }
```

Mutated:
```cpp
template <auto T> decltype(*T) func() { return *T; }
```

Explanation:  
The mutation involves dereferencing the template parameter `T` inside a function with `decltype(*T)` as the return type. This mutation can lead to a crash when `T` is a type or value that cannot be dereferenced, causing the compiler to hit an assertion or internal error while trying to deduce the type, similar to the crash caused by attempting to deduce an invalid auto type.