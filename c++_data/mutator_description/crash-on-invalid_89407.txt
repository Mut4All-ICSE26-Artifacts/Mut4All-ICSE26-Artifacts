Mutation Operator: Modify constexpr Function Returning Size

Target Construct: This mutation operator targets `constexpr` functions within `struct` or `class` definitions that are intended to return a size-related type, such as `__SIZE_TYPE__`, `size_t`, or other integer types.

Mutation Rule:
1. Identify a `constexpr` member function within a `struct` or `class` that returns a size-related type. This function should return a value related to the size or length of an object.
2. Modify the return statement of this function to return a negative value or an invalid value for the specified return type.
   
Steps:
a. Locate the `constexpr` function returning a size-related type. For instance, a function declared as `constexpr __SIZE_TYPE__ size() const`.
b. Change the return value to a negative constant or an invalid value that doesn't fit the expected domain. For example, replace `return n;` where `n` is a valid size, with `return -1;`.

Example Pseudocode:
Before Mutation:
```cpp
struct Example {
    constexpr size_t size() const { return 10; }
};
```

After Mutation:
```cpp
struct Example {
    constexpr size_t size() const { return -1; }
}
```

Effect:
This mutation introduces an invalid return value for a function that is expected to return a positive or zero value, potentially triggering unexpected behaviors or crashes in compilers that do not handle such cases gracefully. This mutation is effective in testing the robustness of the compiler's constexpr evaluation and its handling of integer overflow or invalid size computations.