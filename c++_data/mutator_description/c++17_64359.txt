Mutation Operator: Template Function Specialization with Recursive Template Instantiation

Target: Function Templates with Recursive Template Instantiation

Mutation Rule:
1. Identify a function template within the seed program.
2. Introduce a specialization or overload of this function template that invokes the function template itself within its definition, creating a recursive template instantiation scenario.
3. Ensure that the recursive instantiation can occur by providing a condition or a mechanism, such as an additional template parameter, that doesn't immediately terminate the recursion.
4. Compile and observe any compiler handling of this recursion, looking for potential crashes or errors.

Example in Pseudo-code:
- Original Function Template: 
  ```cpp
  template <typename T>
  void processData(T data) {
      // Original processing logic
  }
  ```

- Mutated with Recursive Instantiation:
  ```cpp
  template <typename T, int N>
  void processData(T data) {
      if constexpr (N > 0) {
          processData<T, N-1>(data); // Recursive call with decreasing N
      }
      // Additional processing logic
  }
  ```

Key Points:
- This mutation operator targets a common pain point in template metaprogramming, where recursive template instantiations can lead to unexpected compiler behavior.
- The mutation is designed to leverage existing template functions but introduces a recursive element through template specialization.
- By manipulating the recursion depth through an additional template parameter, the mutation can potentially trigger compiler bugs related to template instantiation limits or handling.