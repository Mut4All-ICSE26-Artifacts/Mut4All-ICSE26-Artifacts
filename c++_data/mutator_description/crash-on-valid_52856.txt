Mutation Operator: Enum Usage Within Structs

This mutation operator targets the use of enums defined within structs and brought into scope using the `using enum` statement. It specifically applies to compound expressions that involve enum constants. The goal is to trigger potential compiler issues when such enums are used in compound expressions.

Mutation Rule:

1. Locate a struct declaration with an enum defined within it. Ensure the enum contains at least two constants.

2. Bring the enum into scope using the `using enum` statement. Ensure that this is done within a function scope (e.g., within `main`).

3. Construct a compound expression using the enum constants. The expression should involve at least two operations, such as bitwise OR (`|`), AND (`&`), or addition (`+`).

4. Ensure that the expression is used in a context where its result is assigned to a variable.

Example:

Original Code:
```
struct Container {
	enum Options {
		Opt1 = 1,
		Opt2 = 2
	};
};

using C = Container;

int main() {
	using enum C::Options;
	int result = (Opt1 | Opt2);
}
```

Mutated Code:
```
struct Container {
	enum Options {
		Opt1 = 1,
		Opt2 = 2,
		Opt3 = 4
	};
};

using C = Container;

int main() {
	using enum C::Options;
	int result = (Opt1 | Opt3 & Opt2); // Compound expression with multiple operations
}
```

In this mutation, we expand the use of the enum constants in a compound expression with multiple operations to test the compiler's handling of enum constants used in such contexts. The aim is to uncover any potential crashes or undefined behavior that could occur in the compiler's frontend when dealing with complex enum expressions.