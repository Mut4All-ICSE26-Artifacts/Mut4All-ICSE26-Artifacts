
Mutation Operator: Modify Default Argument in Function Template

Target Code Construct:
This mutation operator targets function templates, specifically modifying default arguments within the function declarations.

Mutation Rule:
1. Identify a function template with a default argument in its parameter list.
2. Change the default argument to involve a call to a function taking the parameter itself as an argument.
3. Ensure that the introduced function or operation could potentially be problematic, such as involving a self-referential or recursive call or an operation that is not well-defined.

Step-by-Step Instructions:
1. Locate a function template with a default argument, such as:
   ```
   template<typename T> void func(int param = value);
   ```
2. Modify the default argument to involve a function call with the parameter itself as an argument:
   ```
   template<typename T> void func(int param = someFunction(param));
   ```
3. Ensure `someFunction` is declared and has the following signature:
   ```
   int someFunction(int);
   ```

Example of Mutation:
Original:
```
template<typename T> void compute(int factor = 10);
```

Mutated:
```
template<typename T> void compute(int factor = recursiveFunc(factor));
int recursiveFunc(int x) { return x; }
```

This mutation targets the default argument in a function template and replaces it with a function call that involves the parameter itself, which can lead to undefined behavior or recursion issues, thus potentially triggering compiler bugs.