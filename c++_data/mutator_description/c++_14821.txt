Mutation Operator: Misuse of Template Specialization

Target Code Construct: Function Templates

Mutation Rule:
1. Identify a function template in the code that accepts a templated object as a parameter.
2. Modify the template argument of the parameter to introduce an unexpected type mismatch, focusing on const qualifiers or different template parameters that disrupt specialization.
3. Ensure the modification does not alter the general structure of the template parameter but causes an inconsistency in the expected type hierarchy or specialization.

Step-by-step Instructions:
- Locate a function template that uses a templated class as its parameter. For example, `void f(B<const T> p);`.
- Change the template parameter from a `const` qualified type to a non-const type, or vice versa, which should not align correctly with its specialized or partial specialization.
- Example: Change `void f(B<const T> p);` to `void f(B<T> p);` or `void f(B<const volatile T> p);`.
- These changes aim to reflect conditions where the template specialization does not match the expected instantiation or specialization rules, potentially leading to compile-time assertions or crashes.

Note: This operator targets inconsistencies in template specialization and type qualifications, which are common areas for compiler crashes when the instantiation does not meet anticipated conditions.