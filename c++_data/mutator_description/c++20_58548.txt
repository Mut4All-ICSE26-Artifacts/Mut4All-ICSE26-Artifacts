Mutation Operator:
Target: Template Instantiation in Function Templates
Applies to: Function templates with constrained parameters.

Mutation Rule:
1. Identify a function template with a constrained template parameter. For example:
   `template<typename T> requires ConceptName<T> void func(T arg);`

2. Modify the function template to introduce a second templated function overload with a different constraint that could potentially conflict or interact with the original constraint. For example:
   Add another overload:
   `template<typename T> requires OtherConceptName<T> void func(T arg);`

3. Ensure that the constraints (`ConceptName` and `OtherConceptName`) are subtly related or can be satisfied by overlapping sets of types to increase the likelihood of triggering complex template deduction and instantiation processes.

4. Invoke the function in a way that both constraints could apply, forcing the compiler to make a complex decision, which could potentially cause a compiler crash if there are underlying issues with constraint resolution or overload resolution.

Example:
Original function template:
```
template<typename T> requires ConceptA<T>
void exampleFunc(T param) {
    // function body
}
```

Modified with mutation:
```
template<typename T> requires ConceptA<T>
void exampleFunc(T param) {
    // function body
}

template<typename T> requires ConceptB<T>
void exampleFunc(T param) {
    // potentially different function body or similar
}

// Somewhere in the code, this function is called with a type that can satisfy both ConceptA and ConceptB
```

Rationale:
This mutation operator targets the complex interaction between template constraints and overload resolution in C++20. The goal is to trigger scenarios where the compiler might have difficulty resolving which template instantiation to apply, which could reveal issues in the compiler's handling of constrained templates and contribute to crashes. This is particularly relevant given the bug report's context around constrained templates and std::format usage.