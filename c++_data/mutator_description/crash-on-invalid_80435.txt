Mutation Operator: Modify Access Specifiers in Class Inheritance

Target: Class Inheritance with Multiple Base Classes

Mutation Rule:
1. Identify a class that inherits from multiple base classes (e.g., `class Derived : public Base1, private Base2`).
2. Change the access specifier of one of the base classes to a different specifier (e.g., change `private Base2` to `protected Base2` or `public Base2`).

Example:
Original Pseudo-Code:
```
// Class with multiple base classes
class Base1 {};
class Base2 {};
class Derived : public Base1, private Base2 {};  // Original access specifier
```

Mutated Pseudo-Code:
```
// Mutate the access specifier for Base2
class Base1 {};
class Base2 {};
class Derived : public Base1, protected Base2 {};  // Changed access specifier
```

This mutation explores the effect of changing access levels on the derived class's ability to access members of its base classes. It targets issues like access control checks and can potentially trigger inconsistencies or assertion failures in the compiler's semantic analysis phase.