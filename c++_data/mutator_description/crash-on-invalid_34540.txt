Mutation Operator: Nested Function Call Mutation

Target: Function calls within nested loops or conditional statements

Mutation Rule:
1. Identify nested loops (e.g., for, while) or conditional statements (e.g., if, switch) within the seed program that contain function calls.
2. Select a function call within one of these nested structures.
3. Introduce a new function call within the same structure that uses an existing function from the program. Ensure the arguments used in this new call are variables that are already within the scope of the nested structure.
4. If no suitable existing function is available, define a simple helper function (e.g., a function that returns a constant or performs a basic arithmetic operation) at the beginning of the program before main().
5. Insert this new function call immediately before or after the original function call within the nested loop or conditional statement.

Example:
Original code snippet:
```
for (int i = 0; i < n; ++i) {
    if (condition) {
        process(data[i]);
    }
}
```

After mutation:
- Assume `sum(int a, int b)` is an existing function.
- Mutation results in:
```
for (int i = 0; i < n; ++i) {
    if (condition) {
        sum(i, n); // New function call added
        process(data[i]);
    }
}
```

If no existing function is available:
- Introduce a simple function:
```
int constantFunction() { return 42; }
```
- Mutation results in:
```
for (int i = 0; i < n; ++i) {
    if (condition) {
        constantFunction(); // New function call added
        process(data[i]);
    }
}
```