Mutation Operator: Modify Template Default Arguments

Target: Template with default arguments

Mutation Rule:
1. Identify a function template that includes a default template argument.
2. Replace the default lambda or function with a different function object that takes a parameter of the same type but has a different implementation. 
3. Ensure the new function object maintains the original parameter types and return types.

Example:
Suppose you have a template:
```cpp
template <typename T = decltype([](int x) { return x > 0; })>
bool check(T func) {
    return func(5);
}
```

Mutation Steps:
1. Change the default argument to a new function object:
   - Original: `decltype([](int x) { return x > 0; })`
   - Mutated: `decltype([](int x) { return x == 0; })`

Updated template:
```cpp
template <typename T = decltype([](int x) { return x == 0; })>
bool check(T func) {
    return func(5);
}
```

This mutation targets the template argument and will help explore how different function implementations affect the compiler's ability to handle templates with default arguments. The mutation retains the parameter and return type to ensure it integrates well with existing code.