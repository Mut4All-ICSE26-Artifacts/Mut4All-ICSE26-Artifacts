Mutation Operator: Template Function Overloading

Target: Function template definitions.

Mutation Rule:
1. Identify a function template with multiple template parameters and a binary operation within its body, where at least one parameter is used.
2. Change the binary operation to use an invalid type combination that is not directly operable, such as comparing a template parameter type with a fixed type that introduces a conflict.
3. Ensure the function template is instantiated by passing types that will lead to an invalid operation during compilation.

Example:
Original code:
```
template <typename T, typename U>
constexpr bool compare(T a, U b) {
  return a == b;
}
```

Mutated code:
```
template <typename T, typename U>
constexpr bool compare(T a, U b) {
  return a == static_cast<int>(b); // Introduces a potential invalid operation.
}
```

Explanation:
In the mutated code, the binary operation within the function template is altered to force a cast on one of the template parameters, creating a scenario where an invalid operation may occur during template instantiation, particularly if `U` is not interconvertible with `int`. This mutation exploits potential template instantiation issues, which are a common source of compiler crashes due to incorrect assumptions made during template processing.