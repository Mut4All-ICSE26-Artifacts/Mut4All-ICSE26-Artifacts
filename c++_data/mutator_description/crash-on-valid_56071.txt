Mutation Operator: Modify Lambda Return Type in Template Functions

Target Code Construct: Lambda expressions within template functions

Mutation Rule:
1. Identify a lambda expression within a template function that uses `decltype` for its return type.
2. Change the return type of the lambda from `decltype(variable)` to a fixed type like `int` or `void`.
3. If the lambda's body contains an expression, ensure it conforms to the new return type.

Example:
Original:
```
template <typename T>
void function() {
  char c;
  [](auto) -> decltype(c) {}(0);
}
```

Mutated:
```
template <typename T>
void function() {
  char c;
  [](auto) -> void {}(0);
}
```

Explanation:
This mutation operator modifies the use of `decltype` in lambdas within templates, which is a structure more prone to triggering C++ compiler bugs. By simplifying the return type, we may expose hidden issues in how the compiler handles type deduction or captures within templates. This operator is designed to focus on the interaction of lambda expressions and template instantiation, which are complex areas in C++ compilers.