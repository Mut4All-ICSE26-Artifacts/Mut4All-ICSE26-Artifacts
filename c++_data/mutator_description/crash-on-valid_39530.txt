Mutation Operator: Template Argument Deduction in Constructors

Target: Class Template Constructors

Step-by-step Mutation Rule:
1. Identify a class template within the seed program where a constructor is designed to deduce its template parameters automatically.
2. Modify the class template constructor to include an additional non-type template parameter. For example, if the original constructor is:
   `template<typename T> MyClass(T t) { ... }`
   Modify it to:
   `template<typename T, int N = 0> MyClass(T t) { ... }`
3. Within the constructor body, incorporate a static assertion or any operation that utilizes the new template parameter `N`. For example:
   `static_assert(N >= 0, "N must be non-negative");`
4. Instantiate the class template in the seed program with new arguments, leveraging automatic template parameter deduction for the first parameter, and explicitly specify the non-type parameter. For instance:
   `auto instance = new MyClass(value);` 
   Change to:
   `auto instance = new MyClass(value, 5);`
5. Ensure that the modified constructor is called in a context where the original constructor would be used, allowing the compiler to attempt deduction and potentially expose issues.

Explanation:
This mutation operator targets the area of template argument deduction, which is a complex feature involving the automatic deduction of template types and parameters. By introducing a non-type parameter and explicitly setting it in calls, it not only increases the coverage by forcing the compiler to handle a broader range of template deduction scenarios but also stresses the compilerâ€™s template system. This can lead to the discovery of crashes or miscompilations related to parameter deduction logic.