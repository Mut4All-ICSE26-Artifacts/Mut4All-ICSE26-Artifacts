Mutation Operator: Template Function Parameter Modification

Target: Template function declarations within class or struct definitions.

Mutation Rule:
1. Identify a template function within a class or struct definition. The function should be templated with a type parameter, and the function should include an existing operator overload.
2. Modify the function to involve an additional non-template parameter, which can be an integer, floating-point, or a reference type. Ensure that this additional parameter has a default value.
3. The modified function should still be called in the original context without satisfying the new parameter, leading to ambiguity or overload resolution failure.

Step-by-Step Instructions:
- Locate a template function within a class, such as:
  ```cpp
  template <typename T> void operator++(int);
  ```
- Modify the function signature to introduce a new parameter with a default value:
  ```cpp
  template <typename T> void operator++(int, int extraParam = 0);
  ```
- Leave the function body unchanged or make minimal changes to accommodate the new parameter if necessary.
- Ensure the function is called in the original way without accommodating the new parameter:
  ```cpp
  obj++;
  ```

Example:
Before Mutation:
```cpp
class SampleClass {
  template <typename T> void operator++(int) {
    // Function logic
  }
};

// Usage
SampleClass obj;
obj++;
```

After Mutation:
```cpp
class SampleClass {
  template <typename T> void operator++(int, int extraParam = 0) {
    // Function logic
  }
};

// Usage remains unchanged
SampleClass obj;
obj++;  // Potential for ambiguity or overload resolution failure
```

By adding a new parameter with a default value to a template operator function, this mutation operator exploits potential overload resolution issues in the compiler, which could lead to a crash similar to the one described in the bug report. This mutation approach can be widely applied to other template functions and operators to test compiler robustness.