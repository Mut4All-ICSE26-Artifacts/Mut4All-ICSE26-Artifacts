Mutation Operator: Template Function with Nested Template Instantiation

Target: Template Function

Description: This mutation operator targets template functions, specifically focusing on nested template instantiation. The goal is to modify existing template functions by introducing nested template types in their instantiation to explore potential areas that might trigger compiler issues.

Step-by-Step Mutation Rule:
1. Identify a template function within the seed program. This function should have template parameters that can be instantiated with various types.
2. Select one of the template parameters and replace it with another template type that itself is instantiated with another type. This creates a nested template instantiation.
3. Ensure the new template type is appropriately declared if it does not already exist in the program. Provide a clear declaration if introducing a new template.
4. Replace the relevant function calls in the program to match the newly instantiated template function signature.

Example:
Original Template Function:
```
template <typename T>
void process(T value) {
    // Function implementation
}
```

Mutation:
1. Introduce a new template type:
```
template <typename U>
class Wrapper {
    // Class implementation
};
```

2. Modify the template function to use the new nested template:
```
template <typename T>
void process(Wrapper<T> wrappedValue) {
    // Updated function implementation
}
```

3. Update relevant function calls in the program to use `Wrapper<ExistingType>` where `ExistingType` is a type already declared in the program.

This mutation introduces complexity through nested template instantiation and explores areas of potential mismanagement in template handling by the compiler, especially in the context of code generation and instruction selection passes.