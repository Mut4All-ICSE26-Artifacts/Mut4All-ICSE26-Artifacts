Mutation Operator: Modify Usage of Parameter Packs in Template Instantiation

Target Code Construct: Template Specializations and Instantiations

Mutation Rule:
1. Identify a template structure that uses parameter packs (e.g., `template <typename... Ts>`).
2. Locate an instance where a function or struct is instantiated with parameter packs.
3. Modify the instantiation to change the expansion context of the parameter pack:
   - If the parameter pack is being expanded within a nested template or another parameter pack, reorder the expansions or introduce an additional parameter pack and expand it within the existing context.
   - To illustrate, suppose you have a construct like `template <typename... Ts> struct MyStruct : Ts... {};` and an instantiation `MyStruct<int, double>`. You can change it to `MyStruct<int, ParameterPack<double>>` where `ParameterPack` is a wrapper or placeholder struct for additional expansion.
4. Ensure that the newly introduced parameter pack or reordered expansions still reference existing types or structures in the seed program.
5. If introducing a new wrapper or placeholder (like `ParameterPack`), declare it with a simple template structure that can encapsulate or represent any given type (e.g., `template <typename T> struct ParameterPack {};`).

Example:
Original:
```cpp
template <typename... Ts>
struct Example : Ts... {};

Example<int, double> instance;
```

Mutated:
```cpp
template <typename T>
struct Wrapper {};

template <typename... Ts>
struct Example : Ts... {};

Example<int, Wrapper<double>> instance;
```

This mutation potentially influences the template instantiation process, which can reveal bugs related to parameter pack handling and type deduction in the compiler.