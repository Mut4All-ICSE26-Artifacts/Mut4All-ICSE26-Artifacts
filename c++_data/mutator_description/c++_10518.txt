Mutation Operator: Template Instantiation Mismatch

Target Code Construct: Function Templates

Mutation Rule:
1. Identify a function template in the seed program. Look for a template function definition, which includes the 'template' keyword followed by template parameters in angle brackets.
2. Modify the template parameter list by introducing an additional template parameter that is not used in the function body. For example, if the original template is `template<typename T>`, change it to `template<typename T, typename U>`.
3. Attempt to instantiate the template function using only the original parameter, leaving the new parameter without a corresponding argument. For instance, call the function template with a single type, e.g., `Function<int>()`, without providing a type for the new parameter `U`.
4. Ensure the rest of the seed program remains unchanged and compiles as it did before the mutation.

Example:
Original Code:
```cpp
template<typename T>
void foo(T value) {
    // Function implementation
}

int main() {
    foo(10);
    return 0;
}
```

Mutated Code:
```cpp
template<typename T, typename U>
void foo(T value) {
    // Function implementation
}

int main() {
    foo<int>(10);
    return 0;
}
```

Explanation:
By introducing an unused template parameter and providing incomplete template arguments during instantiation, this mutation attempts to trigger inconsistencies or unhandled situations in the template instantiation logic of the compiler. This mutation leverages modifications in the template parameter list and instantiation process, which are areas potentially prone to bugs in C++ compilers.