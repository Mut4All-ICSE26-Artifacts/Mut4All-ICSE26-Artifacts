Mutation Operator: Modify Class Template Instantiation in Union with Non-trivial Class

Target Code Construct: This mutation operator targets the instantiation of a class template within a union type where the class is non-trivial. It applies specifically to class templates, unions, and non-trivial class structures.

Mutation Rule:
1. Identify a class template that is instantiated within a union. Ensure that the class template involves non-trivial elements such as constructors, destructors, or overloaded operators.
2. Modify the instantiation by introducing a type modifier or changing the template argument to a more complex type, such as switching from a basic type to a user-defined type.
3. Ensure that the union encapsulates this instantiation, and the class involved should have at least one non-trivial member function.
4. If no union is present, introduce a union structure to enclose the class template instantiation.

Example:
Original Code:
```
template<typename T>
class MyClass {
public:
    MyClass() {}
    void func() {}
};

int main() {
    union {
        MyClass<int> instance; // Instantiation of class template
    };
    return 0;
}
```

Mutation:
1. Change the template argument `int` to a user-defined type `MyType`.
2. Introduce `MyType` as a struct with a non-trivial constructor.

Mutated Content:
```
struct MyType {
    MyType() {}
    void customFunc() {}
};

template<typename T>
class MyClass {
public:
    MyClass() {}
    void func() {}
};

int main() {
    union {
        MyClass<MyType> instance; // Modified instantiation of class template
    };
    return 0;
}
```

By creating a non-trivial type `MyType` and using it as a template argument within a union, we introduce potential complexity that could trigger compiler issues, particularly if the compiler mishandles the instantiation of template classes with non-trivial types in unions.