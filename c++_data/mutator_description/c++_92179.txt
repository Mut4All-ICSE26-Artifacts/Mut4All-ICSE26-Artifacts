Mutation Operator: Nested Namespace Manipulation

Target Code Construct: Namespace declarations, particularly nested namespaces.

Mutation Rule:
1. Identify a nested namespace in the seed program. For example, if you have a namespace like `namespace outer { namespace inner { ... } }`, this is a candidate for mutation.
2. Introduce an additional layer of namespace nesting around the identified namespace. For instance, wrap the existing nested namespace with another namespace. This can be a new namespace or an existing one from the seed program.
3. Ensure that the new namespace is correctly opened and closed with `{` and `}`.
4. Adjust any qualified names or usages of elements from the nested namespace accordingly.

Example Before Mutation:
```cpp
namespace outer {
    namespace inner {
        void function() {
            // Function Implementation
        }
    }
}
```

Example After Mutation:
```cpp
namespace wrapper { // Introduced a new namespace
    namespace outer {
        namespace inner {
            void function() {
                // Function Implementation
            }
        }
    }
}
```

Rationale: Introducing additional layers of namespace nesting can trigger bugs related to name resolution and scoping rules, particularly if the compiler has issues handling complex namespace hierarchies. This mutation is aimed at evaluating the compiler's ability to manage and correctly resolve deeply nested namespaces, which can often lead to obscure and hard-to-diagnose crashes.