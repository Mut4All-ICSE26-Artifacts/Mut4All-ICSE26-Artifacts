Mutation Operator: Misuse of Template Type Parameters

Target: Template Functions

Mutation Rule:
1. Identify a function template declaration with type parameters, such as `template <typename T>`.
2. Alter a template argument usage within the function to deliberately mismatch expected type-based operations.

Step-by-Step Instructions:
- Locate a template function that uses a type parameter in its body.
- Modify an expression that utilizes the template type parameter. Specifically, substitute it with a non-type operation or context, creating a type mismatch. For example, use a template type parameter in a context expecting a non-type template argument.

Example Mutation:
Given the following code:
```cpp
template <typename T>
void process() {
    T value{};
    // Original usage
    std::cout << value;
}
```
Mutate it by introducing type misuse:
```cpp
template <typename T>
void process() {
    T value{};
    // Misuse: Attempt to use a type parameter as a non-type template argument
    constexpr int invalidUsage = sizeof(T); // assuming T is not a type amenable to sizeof
}
```

Explanation:
This mutation operator targets the delicate handling of template type parameters within C++ template functions. By introducing inappropriate operations or contexts for type parameters, it can trigger issues in the compiler's template instantiation logic, particularly when the misuse leads to unexpected type argument transformations. This broadens the scope of potential coverage by challenging the compiler's robustness in handling template misusage.