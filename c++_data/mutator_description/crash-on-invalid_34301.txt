Mutation Operator: Partial Specialization of Variable Templates

Description: This mutation operator targets partial specialization of variable templates with template template parameters in C++. The mutation focuses on creating scenarios where the compiler's handling of template specialization logic is pushed to its limits, which can often trigger bugs or crashes.

Mutation Rule:
1. Identify a variable template with a template template parameter in the code. This can often be found by looking for patterns where a template parameter is itself a template, such as `template <typename T, template <typename...> class Container>`.
2. Modify the code to use a partial specialization of this variable template.
3. Introduce a condition where the partial specialization partially matches but with an incorrect or incomplete substitution that isn't fully viable.

Instructions:
- Locate a variable template with a signature similar to `template <typename T, template <typename...> class Container>`.
- Change the existing specialization logic to partially specialize based on a specific instantiation. For example:
  ```cpp
  template <typename T, template <typename...> class Container>
  struct Example {
    static constexpr bool value = false;
  };

  // Introduce partial specialization
  template <template <typename...> class Container, typename... Args>
  struct Example<Container<Args...>, Container> {
    static constexpr bool value = true;
  };
  ```
- Intentionally misalign the conditions in such a way to make the specialization logic ambiguous or incorrect, such as:
  - Using `Container<int>` where `int` isn't meant to be a type argument according to the substitution rules.
- Ensure that the main program attempts to evaluate or instantiate this ambiguous specialization, for instance by using static_assert or a similar mechanism:
  ```cpp
  int main() {
    static_assert(Example<bool_sequence<true>, bool_sequence>::value, "");
  }
  ```

By crafting these scenarios, the mutation operator can reveal weaknesses in the compiler's template specialization logic, especially when dealing with complex template template parameter substitutions.