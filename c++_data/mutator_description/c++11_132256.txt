Mutation Operator: Default Template Argument in Function Template with Attributes

Target: Function template definition with default template arguments and C++11 attributes.

Mutation Rule:
1. Identify a function template in the code with at least one template parameter having a default argument.
2. Introduce a C++11 attribute (e.g., [[nodiscard]]) to the return type or before the function definition.
3. Ensure the attribute is valid for the template function context.
4. Example change:
   Original Code:
   ```
   template<typename T = int>
   T foo(T value) {
       return value;
   }
   ```
   Mutated Code:
   ```
   template<typename T = int>
   [[nodiscard]] T foo(T value) {
       return value;
   }
   ```

This mutation operator leverages the interaction between template parameters with default values and the introduction of attributes, which, as suggested by the crash report, can potentially lead to parser issues in the compiler, especially when parsing function bodies and declarations. The operator uses attributes in namespace scope or within the function, which can be applied broadly across seed programs containing function templates.