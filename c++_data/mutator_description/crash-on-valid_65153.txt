Mutation Operator

Target: Template Instantiations in Classes
This mutation operator targets variable templates instantiated with a member of a template class, specifically when the member is a static constexpr variable.

Mutation Rule:
1. Identify a template class with a static constexpr member variable. Let's call this class `ClassTemplate` and the member `StaticMember`.
2. Ensure that `ClassTemplate` is a template class with at least one template parameter.
3. In the client code using `ClassTemplate`, identify the usage of a variable template that is instantiated with `ClassTemplate::StaticMember`.
4. Alter the instantiation by performing the following steps:
   a. Replace the usage of `ClassTemplate::StaticMember` in the variable template instantiation with a different constexpr value of the same type defined outside the class.
   b. Ensure the replacement value does not change the semantic meaning of the code but alters the source of the constexpr value.

Example:
Original Code:
```cpp
template <typename T>
class ClassTemplate {
public:
    static constexpr int StaticMember = 42;
};

// Variable template using the static member
template <int N>
constexpr int VariableTemplate = N;

int main() {
    int value = VariableTemplate<ClassTemplate<int>::StaticMember>;
}
```

Mutated Code:
```cpp
// Define an external constexpr value
constexpr int ExternalValue = 42;

template <typename T>
class ClassTemplate {
public:
    static constexpr int StaticMember = 42;
};

// Variable template using the external constexpr value
template <int N>
constexpr int VariableTemplate = N;

int main() {
    // Use ExternalValue instead of ClassTemplate<int>::StaticMember
    int value = VariableTemplate<ExternalValue>;
}
```

This mutation operator leverages the subtle differences in template instantiations involving static members to explore potential edge cases that could lead to compiler crashes, particularly in handling templates and constexpr evaluations.