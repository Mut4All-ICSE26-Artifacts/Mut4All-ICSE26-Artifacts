Mutation Operator: Modify CRTP with Consteval and Static Cast

Target Code Construct: Class Template with CRTP (Curiously Recurring Template Pattern) and `consteval`

Mutation Rule:
1. Identify a class template utilizing CRTP, where a class `Derived` inherits from a class template `Base<Derived>`.
2. Within the class template `Base`, locate any `consteval` function.
3. Inside the `consteval` function, identify a static cast operation that casts `this` to the `Derived` type, like `static_cast<Derived>(*this)`.
4. Modify the static cast to change the way `this` is cast to `Derived`:
   a. Change `static_cast<Derived>(*this)` to `static_cast<Derived&>(*this)`.
   b. If the original code is using `static_cast<Derived*>(this)`, change it to `static_cast<Derived&>(*this)` as well.

Example Pseudo-Code:

Original:
```cpp
template <typename Derived>
class Base {
public:
    consteval void doSomething() {
        static_cast<Derived>(*this).someFunction();
    }
};

class Derived : public Base<Derived> {
public:
    void someFunction();
};
```

Mutated:
```cpp
template <typename Derived>
class Base {
public:
    consteval void doSomething() {
        static_cast<Derived&>(*this).someFunction();
    }
};

class Derived : public Base<Derived> {
public:
    void someFunction();
};
```

This mutation operator targets the peculiarities of CRTP combined with `consteval` and static casting, where the change from casting by value to casting by reference (`Derived&`) may expose inconsistencies or errors in the handling of `consteval` and static casting operations.