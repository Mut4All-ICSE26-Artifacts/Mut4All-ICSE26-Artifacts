Mutation Operator: Modify Member Access

Target Construct: Class/Struct/Namespace Member

Mutation Rule:
1. Identify the usage of a class, struct, or namespace (e.g., std::vector) within the code.
2. Replace a valid member access using the dot operator (.) or arrow operator (->) with an invalid or non-existent member access.
3. If using the dot operator, ensure it is applied to an object or type that does not support it directly (e.g., type instead of object).
4. If using the arrow operator, ensure it is applied to a non-pointer type or replace a valid member with an invalid one.

Example:
Original Code:
- Assume `MyClass` is a class with a member function `foo()`
```
MyClass obj;
obj.foo();
```

Mutated Code:
- Replace the valid member function with an invalid member
```
MyClass obj;
obj.nonExistentMember();
```

Explanation:
This mutation operator targets the member access construct by introducing an invalid member call, which can potentially trigger errors during parsing or semantic analysis, potentially leading to compiler crashes or other unexpected behavior.