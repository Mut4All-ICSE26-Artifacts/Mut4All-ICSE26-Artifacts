Mutation Operator: Modify Default Arguments in Generic Lambdas

Target Code Construct: Generic Lambdas with Default Arguments

Mutation Rule:
1. Identify a generic lambda expression in the seed program. A generic lambda is one that uses the `auto` keyword in its parameter list to indicate that it can accept any type.
2. Locate the default arguments of the lambda function parameters. Default arguments are specified using the `=` operator followed by a value.
3. Change the type or value of the default argument in a way that could introduce type ambiguities or conflicts. For example, if the default argument is a constant like `0.0`, change it to another type that might cause a conflict with the expected type, such as a string literal `"default"`.
4. If the lambda has multiple parameters, ensure that the default arguments are modified in a consistent way that still follows valid C++ syntax but could cause the compiler to misinterpret or mishandle the types.

Example:
Original Code:
```cpp
auto lambda = [](auto x = 0.0) {
    // lambda body
};
```

Mutated Code:
```cpp
auto lambda = [](auto x = "default") {
    // lambda body
};
```

The mutation modifies the default argument from a floating-point number to a string literal. This change can potentially cause type resolution issues in the compiler when it attempts to deduce the type of `x`, leading to unexpected behavior such as a crash or a segmentation fault. The mutation operator targets the specificity and sensitivity of the compiler's type deduction mechanisms, increasing the likelihood of revealing edge cases and bugs.