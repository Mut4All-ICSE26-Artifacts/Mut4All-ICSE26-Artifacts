Mutation Operator: Modify Concept Requirements with Dependent Expressions

Target Code Construct: Concept requirements in templates

Mutation Rule:
1. Identify a concept definition in the source code using `requires` where a type or a template parameter is used.
2. Within a `requires` clause, introduce a dependent expression that is syntactically valid but leads to a value-dependent context.
3. Specifically, change a working expression into one that involves a template parameter directly in a manner that makes it dependent.
4. Ensure the dependent expression in the `requires` clause uses existing variables or types when possible.

Step-by-Step Instructions:
- Locate a concept definition similar to the following:
  ```cpp
  template<typename T>
  concept MyConcept = requires(T t) {
    // existing expressions
  };
  ```
- Within the `requires` block, introduce a dependent expression involving a template parameter. For example, replace a non-dependent expression with a dependent one:
  ```cpp
  // Original
  requires (auto x) { x; }

  // Mutated
  requires (T t) { sizeof(t); }
  ```
- Ensure that the mutated expression is valid syntax but leads the compiler to a context where it must evaluate a value-dependent expression.
- Use operations or expressions that, when applied to template parameters, cause the expression to become dependent, such as `sizeof`, `decltype`, or template functions involving the parameter.

Example:
Original Concept:
```cpp
template<typename T>
concept ExampleConcept = requires(T t) {
  t + t; // non-dependent expression
};
```

Mutated Concept:
```cpp
template<typename T>
concept ExampleConcept = requires(T t) {
  sizeof(t); // dependent expression involving template parameter T
};
```

The use of `sizeof(t)` within the `requires` clause involves the template parameter `T` in a way that can trigger issues related to dependency resolution in the compiler, increasing the likelihood of exposing bugs related to expression evaluation in template contexts.