Mutation Operator: Modify Fold Expression in a Lambda Function

Target: This mutation applies to lambda expressions that contain fold expressions, especially within templated entities involving parameter packs.

Mutation Rule:
1. Identify a lambda function within the code that uses a fold expression over a parameter pack. Ensure it resides within a templated function or class.
2. Modify the fold expression by introducing a non-arithmetic operation in the pack expansion.
3. Specifically, replace the fold expression with a sequence that uses an assignment operation, similar to the structure `(..., (void(variable = parameter)))`.

Step-by-Step Instructions:
- Locate the lambda function with a fold expression similar to `[i = Is]{}`.
- Replace the fold expression with an operation involving a void cast and assignment: `(..., (void(i = parameter)))`.
- Ensure that the modified fold expression can compile by using existing variables or introducing an appropriate context if needed.

Example:
Original Code:
```cpp
[](int... Is) {
    ([i = Is]{}, ...);
}
```

Mutated Code:
```cpp
[](int... Is) {
    (..., (void(i = Is)));
}
```

Explanation:
The mutation involves altering the fold expression by substituting it with a void-cast assignment operation. This type of mutation is designed to exploit the handling of pack expansions and void operations within the lambda scope, which can potentially trigger edge cases or unexpected behavior in the compiler's handling of such constructs.