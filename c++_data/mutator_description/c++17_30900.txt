Mutation Operator: Modify Enum Forward Declaration with Base Type

Target Code Construct:
This mutation targets enum forward declarations with an explicit base type.

Mutation Rule:
1. Identify an enum forward declaration in the code that uses an explicit base type, such as `enum EnumName : BaseType;`.
2. Modify the base type to another fundamental type that is also valid for enum underlying types.
3. Ensure the modified base type is compatible with the enum's intended usage, if the enum is later fully defined.

Example:
Consider the following original code snippet:
```cpp
enum FutureEnum : bool;
```

Mutation Steps:
1. Locate the forward declaration of the enum `FutureEnum` with the base type `bool`.
2. Change the base type `bool` to `int` as follows:
```cpp
enum FutureEnum : int;
```

Note:
The change should still adhere to the constraints of the target C++ standard (e.g., C++17 in this case) regarding the allowable base types for an enum. This modification should be applied with the understanding that the rest of the program may need adjustments if the enum is later defined or used.