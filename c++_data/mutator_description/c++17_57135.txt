Mutation Operator: Array Initialization in Nested Lambda

Target Code Construct: This mutation operator targets lambda functions that capture arrays by reference, specifically when these arrays are initialized within a lambda function.

Mutation Rule:
1. Identify a lambda function that captures an array by reference. The lambda function should be used immediately (e.g., invoked directly or assigned to a variable).
2. Within the lambda, introduce a nested array initialization that uses the captured array. The initialization should be complex enough to potentially trigger an inconsistency in the handling of array expressions.
3. Ensure that the nested array is accessed in a manner that could lead to a crash, for example, by accessing through multiple subscript operations or using nested array initializers.

Example of Mutation:
Original Code:
```
void example() {
    int x[2][2];
    auto lambda = [x] { return x[0][0]; };
    int result = lambda();
}
```

Mutated Code:
```
void example() {
    int x[2][2];
    auto lambda = [x] {
        int nested[2] = { x[0][0], x[1][1] }; // Introduce nested initialization
        return nested[0]; // Access nested array
    };
    int result = lambda();
}
```

In this mutation, the lambda captures the 2D array `x` by reference, and then within the lambda, a new array `nested` is initialized using elements from `x`. The initialization and access pattern is modified to potentially expose issues in the compiler's handling of array initialization and lambda expressions. This could lead to a crash similar to the one described in the bug report, as it introduces additional complexity in the nested array initialization and lambda capture mechanism.