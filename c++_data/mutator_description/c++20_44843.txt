Mutation Operator: Template Specialization Conflict

Target Code Construct: Template functions and template class specializations.

Mutation Rule:
1. Identify a template class or function in the seed program that has a specialization.
2. Modify the template parameter list of the specialized version to introduce an additional specialization conflict. For example, if the specialization is `template<> class MyTemplate<int>`, you should create another specialization like `template<> class MyTemplate<int, double>`.
3. Ensure the new conflicting specialization is syntactically valid but semantically conflicting with the existing specialization.
4. If the existing specialization has constraints (using `requires` or SFINAE), adjust the constraints to create an overlapping condition which could lead to an assertion failure or crash.

Example:
Original Code:
```cpp
template<typename T>
class MyTemplate {
public:
    void doSomething();
};

template<>
class MyTemplate<int> {
public:
    void doSomething();
};
```

Mutated Code:
```cpp
template<typename T>
class MyTemplate {
public:
    void doSomething();
};

template<>
class MyTemplate<int> {
public:
    void doSomething();
};

// Introduced conflicting specialization
template<>
class MyTemplate<int, double> {
public:
    void doSomething();
};
```

In this example, a new conflicting specialization is introduced that should trigger the compiler to evaluate specializations critically, potentially leading to assertion failures or unexpected behavior in the template instantiation mechanism.