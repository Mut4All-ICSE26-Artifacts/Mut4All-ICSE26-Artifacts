Mutation Operator: Default Argument with Overloaded Function

Target: Functions with default arguments, especially when dealing with overloaded functions or when default arguments have complex initialization.

Mutation Rule:
1. Identify a function that has a default argument in its parameter list.
2. Add an overloaded version of this function with a different signature but related functionality.
3. Ensure that the overloaded version either does not use default arguments or uses a different default argument than the original.
4. Call the function in a way that could potentially lead to ambiguity or unexpected behavior due to the default argument and overloading combination.

Example:
Original Code:
```cpp
int calculate(int a, int b = 10) {
    return a + b;
}

void test() {
    int result = calculate(5);
}
```

Mutated Code:
```cpp
int calculate(int a, int b = 10) {
    return a + b;
}

int calculate(double a) { // Overloaded version
    return static_cast<int>(a * 2);
}

void test() {
    int result = calculate(5); // Potential ambiguity with default argument
}
```

Explanation:
This mutation introduces an overloaded function with a different parameter type but related functionality. By utilizing a call that might leverage the default argument while an overloaded version exists, it can cause issues in the compiler's overload resolution process, potentially triggering bugs related to the handling of default arguments and overloaded functions.