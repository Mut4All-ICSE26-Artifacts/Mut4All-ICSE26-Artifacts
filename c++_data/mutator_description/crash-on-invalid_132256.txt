Mutation Operator: Modify Template Default Arguments in Nested Namespaces

Targeted Code Construct: Template class declarations with default template arguments, particularly within nested namespaces.

Mutation Rule:
1. Identify a template class declaration with default template arguments.
2. If the class is declared within a namespace, modify the nested namespace structure.
3. Specifically, add an additional level of namespace with a similar name to an existing namespace.
4. Adjust the default template argument to refer to a type from the newly added namespace.
5. Ensure the new namespace and type are correctly declared.

Example:
Original Code:
```
namespace Outer {
    namespace Inner {
        template <typename T = int>
        class MyClass {};
    }
}
```

Mutated Code:
```
namespace Outer {
    namespace Inner {
        namespace InnerDup {
            using NewType = double;
        }
        template <typename T = InnerDup::NewType>
        class MyClass {};
    }
}
```

Explanation:
- The original template class `MyClass` is declared in the `Outer::Inner` namespace with a default template argument of `int`.
- An additional namespace `InnerDup` is introduced within `Outer::Inner`.
- A new type `NewType` is declared in `InnerDup`.
- The default template argument for `MyClass` is altered to `InnerDup::NewType`.
- This modification might confuse the parser and could potentially trigger bugs related to template argument deduction and nested name handling in the compiler.