Mutation Operator: Invalid Inline Assembly Instruction in Function Body

Target: This mutation operator targets function bodies, specifically modifying inline assembly instructions within them.

Mutation Rule:
1. Identify an existing function in the seed program.
2. Locate any inline assembly code blocks within the function body. If no inline assembly exists, introduce a new inline assembly block.
3. Modify an existing inline assembly instruction or insert a new invalid instruction. Ensure the instruction uses incorrect or nonsensical operand references.
4. If introducing a new inline assembly block, use the syntax:
   ```cpp
   __asm__("invalid_instruction %0"
           : /* No output operands */
           : "r"(some_variable));
   ```
   Where `some_variable` is an existing variable within the scope of the function.

Example:
Before Mutation:
```cpp
void sampleFunction() {
    int value = 10;
    __asm__("nop");
}
```

After Mutation:
```cpp
void sampleFunction() {
    int value = 10;
    __asm__("invalid_instruction %0"
            : /* No output operands */
            : "r"(value));
}
```

This mutation introduces a malformed inline assembly instruction, which is expected to provoke a crash or unexpected behavior in the compiler due to incorrect handling of inline assembly parsing or code generation.