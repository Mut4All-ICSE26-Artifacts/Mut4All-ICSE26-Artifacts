Mutation Operator: Auto Type in Struct Member

Target Code Construct:
This mutation operator targets struct definitions, specifically the use of auto for non-static data members within a struct.

Mutation Rule:
1. Identify a struct definition in the seed program.
2. Ensure the struct contains at least one non-static data member with an explicitly specified type.
3. Replace the type of one of these non-static data members with auto, ensuring it is initialized with a literal or expression that allows the type to be deduced.
4. Ensure no other struct or class member within the same struct is modified during the mutation.

Example:
Original Code:
```
struct Sample {
  int number{42};
  double ratio = 2.5;
};
```

Mutated Code:
```
struct Sample {
  auto number = 42; // Changed from int to auto
  double ratio = 2.5;
};
```

Summary:
This mutation operator leverages the use of the auto keyword in C++20, which can sometimes lead to unexpected behavior or compiler crashes when used in certain contexts, such as non-static struct members. The mutation focuses on altering data types within a struct to use auto, thereby testing the compiler's ability to correctly deduce types and handle such declarations. This operator has a broad applicability and can be used in various seed programs with struct definitions.