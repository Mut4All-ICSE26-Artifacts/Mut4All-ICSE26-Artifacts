Mutation Operator: Templated Function Misuse

Target Code Construct: Function Templates

Mutation Rule:
1. Identify a function template declaration in the seed program. The function should have at least one template parameter.
2. Locate a function call that uses this template function.
3. Intentionally misuse template argument deduction by providing an argument type that cannot be deduced to match any instantiation of the template parameter.

Example Description:
Consider a function template declared as follows:

template <typename T>
void process(T value) {
    // some processing logic
}

Mutation Steps:
1. Assume there exists a call to this function like process(10); in the seed program.
2. Change the call to process(10.5, "extra"); to introduce an erroneous function call that does not match the expected template function signature. This exploits the compiler's need to handle mismatches due to template argument deduction failure.

Note: The example provided above introduces a second argument that is not expected by the template, causing issues during template specialization and deduction. This mutation aims to leverage the compiler's handling of template instantiations, which in certain cases can lead to crashes if not managed correctly.