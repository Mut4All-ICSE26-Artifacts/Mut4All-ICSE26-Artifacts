Mutation Operator: Invalid Use of Constexpr with Deleted Functions

Target Code Construct:
Class methods, specifically overloaded assignment operators.

Mutation Rule:
1. Identify a class that has a user-defined assignment operator.
2. Modify the assignment operator to be deleted by using the `= delete` specifier.
3. Precede the deleted assignment operator with `constexpr`, which is not semantically correct for deleted functions.

Example:
Before Mutation:
```
class MyClass {
public:
    MyClass& operator=(const MyClass&) { return *this; }
};
```

After Mutation:
```
class MyClass {
public:
    constexpr MyClass& operator=(const MyClass&) = delete;
};
```

Explanation:
This mutation operator targets scenarios where an assignment operator is both declared as `constexpr` and deleted. Since `constexpr` implies that a function should be usable in constant expressions and should be defined, applying `= delete` here contradicts this purpose, as a deleted function cannot have a definition. This mutation is designed to trigger compiler crashes or errors by creating an invalid semantic combination that the compiler must handle.