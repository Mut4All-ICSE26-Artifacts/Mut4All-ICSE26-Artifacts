Mutation Operator: Template Instantiation with Default Arguments

Target: Function Templates

Description:
This mutation operator targets function templates with multiple template parameters. It specifically modifies the template instantiation process by introducing default template arguments in complex scenarios to simulate or trigger conditions that may lead to compiler crashes.

Mutation Rule:
1. Identify a function template with two or more template parameters in the given seed program.
2. Introduce default template arguments to one or more of the template parameters. Ensure these defaults are non-trivial and potentially lead to ambiguity or complexity when the template is instantiated.
3. Create an instantiation of the function template, using only some of the template parameters explicitly and relying on the defaults for others.

Example:
Consider a function template defined as follows:

```
template<typename T, typename U, typename V>
void exampleFunction(T t, U u, V v) {
    // Function implementation
}
```

Apply the mutation as described below:

Step 1: Modify the function template to introduce default template arguments.
```
template<typename T, typename U = int, typename V = double>
void exampleFunction(T t, U u = 0, V v = 0.0) {
    // Function implementation
}
```

Step 2: Instantiate the function template with only one explicit template argument, utilizing the defaults for the others.
```
exampleFunction<char>('a');
```

This mutation can increase the complexity of instantiation and is designed to potentially trigger issues in the compiler's template instantiation logic, such as ambiguous or multiple possible instantiations, leading to compiler crashes similar to those reported in the bug trace.