Mutation Operator 1:

Target: Template Function with Variadic Template Parameters

Mutation Rule:
1. Identify a template function that uses variadic template parameters, specifically of type `bool`.
2. Transform one of the variadic template parameters inside a lambda function within the template function body to an unexpanded parameter pack.
3. Apply the `__attribute((diagnose_if))` to this parameter pack inside the lambda, without expanding the pack.
4. Ensure that the lambda is immediately invoked within the template function.

Example:

Original Code:
```cpp
template <bool... vals>
void f() {
    []() __attribute((diagnose_if(vals, "message", "error"))) {}();
}

void g() { f<true, false>(); }
```

Mutated Code:
```cpp
template <bool... vals>
void f() {
    []() __attribute((diagnose_if(vals, "message", "error"))) {}(); // Use of unexpanded pack
}

void g() { f<>(); } // Empty pack used in instantiation
```

Explanation:
This mutation targets the use of variadic template parameters in a lambda function with the `diagnose_if` attribute. By applying the attribute to an unexpanded parameter pack, the mutation aims to trigger compiler bugs related to handling dependent expressions, as demonstrated in the bug report provided. This mutation is specific to template functions with variadic parameters and involves modifying the use of these parameters within the body of the function, particularly in conjunction with attributes that expect expanded parameters.