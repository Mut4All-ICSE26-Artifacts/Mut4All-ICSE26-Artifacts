Mutation Operator: Modify Lambda Expressions with Constraints

Target: Lambda expressions with templated parameters and constraints.

Mutation Rule:
1. Identify lambda expressions that are templated with constraints, particularly those using `requires` clauses.
2. Modify the lambda to include a non-trivial `requires` clause that involves a template parameter not used in the lambda's body to trigger the assertion related to parameter constraints.

Example Transformation:
- Original Code:
  ```cpp
  auto lambda = []<typename T>(T param) -> void requires requires { 0; } {};
  ```

- Mutated Code:
  ```cpp
  auto lambda = []<typename T, typename U>(T param) -> void requires requires { sizeof(U); } {};
  ```

Explanation:
- The original lambda expression includes a simple `requires` clause.
- The mutation introduces a new template parameter, `U`, which is not used in the lambda's body but is referenced in the `requires` clause.
- This mutation can potentially cause the compiler to attempt to deduce a type for `U`, leading to assertion failures if `U` cannot be deduced due to lack of usage, thereby targeting the parameter handling mechanisms in the compiler's template instantiation logic.