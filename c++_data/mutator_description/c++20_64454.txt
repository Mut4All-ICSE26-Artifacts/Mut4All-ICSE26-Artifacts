Mutation Operator: Modify Function Template with Requires Clause

Target Code Construct: Function template with requires clause

Mutation Rule:
1. Identify a function template that has a requires clause, particularly one that depends on the parameters of the function.
2. Modify the function template by introducing an additional function parameter that is not used within the function body but is included in the requires clause.
3. Ensure that the requires clause is parameter-dependent and can trigger the evaluation based on the new parameter.
4. If the function is defined out-of-line, make sure to replicate the mutation in both the declaration and the definition.

Example:
Original Code:
```
template<typename T>
auto exampleFunc(auto param) requires (param()) {
    // Function body
}
```

Mutated Code:
```
template<typename T>
auto exampleFunc(auto param, auto extraParam) requires (param() && extraParam()) {
    // Function body
}
```

Explanation:
- A new parameter 'extraParam' is added to the function template 'exampleFunc'.
- The requires clause is modified to include a condition based on 'extraParam'.
- This mutation targets the fragile interaction between template parameters and requires clauses, which is a common area for compiler bugs, especially involving parameter-dependent expressions.