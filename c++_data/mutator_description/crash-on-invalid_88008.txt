
Mutation Operator: Invalid Member Access in Uninitialized Struct

Target Code Construct: Struct member access within a function.

Mutation Rule:
1. Identify functions that take pointers to undefined or forward-declared structs as parameters.
2. Within the function body, introduce an access to a non-existent member of the struct using the pointer.
3. Ensure the non-existent member is used in an initialization or assignment context to trigger evaluation.
4. If no existing structs meet the criteria, add a forward declaration of a struct at the beginning of the code.

Example:
Suppose we have a forward-declared struct `U` and a function that takes a pointer to this struct.

Before Mutation:
```cpp
struct U;

void process(struct U *u) {
    // function implementation
}
```

After Mutation:
```cpp
struct U;

void process(struct U *u) {
    int x = u->nonExistentMember; // Accessing a non-existent member to trigger a crash
}
```

This mutation operator targets the compiler's handling of member access in undefined structs, which can lead to crashes when such code is evaluated or compiled. It is universally applicable to any seed program containing forward-declared structs and functions using pointers to them.