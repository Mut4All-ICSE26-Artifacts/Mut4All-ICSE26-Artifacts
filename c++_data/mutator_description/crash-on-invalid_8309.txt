Mutation Operator: Template Specialization Constructor Mutation

Target: Template Constructor in a Class

Description: This mutation targets class constructors that utilize template specializations. The mutation involves altering the constructor and its template parameters to create scenarios where template deduction or specialization might erroneously occur, causing potential assertion failures in the compiler's template handling logic.

Mutation Rule:
1. Identify a class that has a template constructor specialization.
2. Modify the constructor to add an additional template parameter in the specialization that does not match the primary template. 
3. Change the instantiation call to match the new template parameter setup to test the compilerâ€™s ability to handle unexpected template parameter depths.

Example Mutation:
Original Code:
```cpp
template<typename T>
class ExampleClass {
public:
    ExampleClass(T value);
};

template<>
ExampleClass<char>(char value) {
    // original constructor logic
}
```

Mutated Code:
1. Add an additional template parameter to the specialized constructor:
```cpp
template<>
ExampleClass<char, int>(char value, int additionalParam) {
    // new logic or keep similar logic with an unused parameter to test template depth
}
```

2. Change the instantiation calls to match the new template parameters:
```cpp
ExampleClass<char, int> instance('a', 42); // Changed instantiation to match the new specialization
```

This mutation tests the compiler's handling of template specializations that introduce additional parameters, which could lead to crashes if the compiler's template deduction system is not robust against unexpected parameter configurations.