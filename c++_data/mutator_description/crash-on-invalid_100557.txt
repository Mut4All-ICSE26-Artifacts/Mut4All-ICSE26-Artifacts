Mutation Operator: Overload Function with Incorrect Types

Target Code Construct:
This mutation operator targets function templates and function overloads in the seed program.

Mutation Rule:
1. Identify function overloads or function templates in the seed program. These are typically functions with the same name but different parameters or template parameters.

2. Choose a function overload or template that takes multiple arguments, preferably of different types.

3. Introduce a call to this function, but deliberately use mismatched types for the arguments. This should result in an invalid code construct that can trigger a crash in certain compilers.

4. Ensure that the mismatched types are incompatible with the original function's parameters. For instance, if the function expects an `int` and a `double`, use a `std::string` and a `std::vector<int>`.

Example:
Original code snippet:
```
void process(int a, double b) {
    // original function implementation
}

int main() {
    process(10, 20.5);
}
```

Mutated code snippet:
```
void process(int a, double b) {
    // original function implementation
}

int main() {
    process("string", std::vector<int>{1, 2, 3});
}
```

Explanation:
The mutation operator first identifies the function `process` which has specific parameter types. It then modifies the call to `process` in `main` by using a `std::string` and a `std::vector<int>` instead of the expected `int` and `double`. This deliberate mismatch in argument types is designed to trigger potential overload resolution and type-checking issues in the compiler, increasing the likelihood of uncovering bugs related to function overloading and template instantiation.