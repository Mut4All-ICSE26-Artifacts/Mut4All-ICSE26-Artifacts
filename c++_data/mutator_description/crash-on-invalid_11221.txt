Mutation Operator: Inconsistent Template Specialization

Target: Template specialization in class templates.

Mutation Rule:
1. Locate a class template in the seed program. For example, if you have:
   ```cpp
   template<typename T>
   class MyClass {
       // Class definition
   };
   ```

2. Introduce a partial specialization for this class template. For example:
   ```cpp
   template<typename T>
   class MyClass<T*> {
       // Specialized class definition
   };
   ```

3. Introduce a conflicting or inconsistent partial specialization for the same class template. This will simulate the conditions that often lead to crashes when compilers encounter unexpected template behavior. For example:
   ```cpp
   template<typename T>
   class MyClass<T**> {
       // Conflicting specialization
   };
   ```

Explanation:
By introducing conflicting template specializations, the compiler is forced to resolve ambiguities in specialization which can lead to internal assertion failures or crashes when the compiler's logic attempts to handle these inconsistencies. This operator targets the parsing and specialization logic of the compiler, which is a sensitive area prone to bugs when inconsistent templates are encountered.