Mutation Operator: Modify Lambda with Parameter Pack in Templates

Target Code Construct: Lambda expressions within templated functions that utilize a parameter pack.

Mutation Rule:
1. Identify a lambda expression within a templated function where a fold expression is applied over a parameter pack.
2. Within the lambda, replace the fold expression with an alternative template metaprogramming construct that manipulates the parameter pack in a different way, such as a recursive template function call.
3. Ensure that the lambda still invokes the replaced construct with the parameter pack.

Step-by-step Instructions:
- Original Code:
  ```cpp
  template<int = 0>
  void f() {
      []<int... Is>() {
          ([i = Is]{}, ...); // Original fold expression
      }.template operator()<1,2,3>();
  }
  ```
- Transformed Code:
  ```cpp
  template<int = 0>
  void f() {
      []<int... Is>() {
          auto handle_pack = [](auto head, auto... rest) {
              // Do something with head
              if constexpr (sizeof...(rest) > 0) {
                  handle_pack(rest...); // Recursive call
              }
          };
          handle_pack(Is...); // Invoke with parameter pack
      }.template operator()<1,2,3>();
  }
  ```

Explanation:
This mutation replaces the fold expression with recursive template-based logic to process the parameter pack. It maintains semantic correctness by applying changes that are logically equivalent yet exercise different parts of the compiler, which may uncover different potential issues. The transformation targets constructs that handle variadic templates and lambdas, which are complex and can lead to subtle bugs when interacting with the compiler's template instantiation mechanisms.