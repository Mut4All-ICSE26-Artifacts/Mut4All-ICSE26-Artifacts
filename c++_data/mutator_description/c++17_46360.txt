Mutation Operator: Introduce declval in Lambda with decltype

Target Structure: Lambda Expressions

Description: This mutation operator targets lambda expressions and modifies them to include the use of `std::declval` in combination with `decltype`. It aims to test the compiler's ability to handle types inferred within lambda scopes and the interaction with `decltype`.

Mutation Rule:
1. Identify a lambda expression with one or more parameters. 
2. Inside the lambda body, declare a type alias or use `decltype` with `std::declval` to simulate calling the lambda itself or another similar callable.
3. Use `static_assert` to check the type obtained from `decltype` against a known type. This simulates a scenario where type deduction might fail or cause an internal error.
4. Ensure the lambda captures at least one variable by value or reference.

Example (Pseudo-code):

Original Lambda:
auto lambda = [](int a, double b) {
    return a + b;
};

Mutated Lambda:
auto lambda = [cap1 = std::declval<int>()](int a, double b) mutable {
    using Callable = decltype(lambda);
    static_assert(std::is_same_v<
        decltype(std::declval<Callable>().operator()(std::declval<int>(), std::declval<double>())),
    double>, "type mismatch");
    return a + b;
};

Explanation:
- The original lambda takes two parameters and returns their sum.
- The mutation captures a simulated integer using `std::declval`, making the lambda mutable.
- Within the lambda body, a type alias `Callable` is declared, deducing the lambda's type.
- `decltype` with `std::declval` checks the return type of invoking the lambda with specified argument types.
- `static_assert` ensures the return type matches the expected result, which might trigger compiler issues if type deduction is mishandled.